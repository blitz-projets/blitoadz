{
  "address": "0xa99e9FffeCB444e6d77634fBF3c10A56a085d393",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "tokenData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "creators",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenCreatorOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenDataOf",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xae6610b83a92bc6c0831cca80a8ec6b9620cf1cbe59543f4d2f0cab13a2a1a57",
  "receipt": {
    "to": null,
    "from": "0x6966Bdb480e7f7A48A7f6B198eE8b9462A265401",
    "contractAddress": "0xa99e9FffeCB444e6d77634fBF3c10A56a085d393",
    "transactionIndex": 4,
    "gasUsed": "2719870",
    "logsBloom": "0x
    "blockHash": "0x66ccfd18575e839f9369f19c92b84c51876d8a9d5c9074c8106e12b6b82126ed",
    "transactionHash": "0xae6610b83a92bc6c0831cca80a8ec6b9620cf1cbe59543f4d2f0cab13a2a1a57",
    "logs": [],
    "blockNumber": 10367614,
    "cumulativeGasUsed": "3137083",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000600ffd5719efff5680000009e2836e53b4463c74d0000004f6781afbfd263c64dffffff000000aaaaff55aaaabfb4f8000000ffffff403578fee761ff0044f77622181425405010708028d0d058a0a84000000055ffffffffffff55ffa22633fee761181425e43b44e4a672733e39ead4aad77643442434deeed6dad45e140c1c639bffd9a066eec39a5fcde43e8948ffffff193c3ef6757aff0044feae34dccfcff77622ffefff181010f7b58c84739ce04f882e47808c5a996aa0c2fff6d37c3f58eb6b6ff9a875ffffff181425fee7612ce8f5a3ce27000000733e39b86f50124e89e43b44f6757affffff262b44ff0044fee761733e39181425c0cbdc4c5270262b44fce4a8d71a2101334e71969fbe26339d9d9df7e26bb2dcef346524dad45e597dce6daa2cffffff2ce8f5124e890099dbff555555f555000000ffff555a0084e63900ffc96bffffff2f256bf42e1f060608fffffffc813a6d1b46a32b3fe03f3788db603965663b9b6a2e38465f658edbdce59b9eba3a4168431b4827122c5f20599125651b1e1f72332fa14a30fda76d4a85b02434549dd9d66db7ccfc618d65ffe1b440774b9cfa38242c18152297242fde3640e03f37471b436d1b46fc813aa14a30c76c31a32b3f38744a7886ca4343436200eaffe0b2b9f7caaeb42a424243ffe0b2d0c4e8fab8b8424243ffe0b200ff84000000ffffffff00e4000000440032ca00976c00500ffadbffffffff22890a28d01f0123e8a4f8ff00a2960cb62453453784531c040462ad5d124e89191010c75b22f4e5d8cc44431c0700eeaf69f99d1bffda541f1407af1818feb96430d55f3e2515fae6bae9904e5f30a4afc39054ff50f34dc6306591132b39fdf151000000b2ebf23f51b50000002196f3545c88d9c3c3ae8484c5a6a682522ca996613e382d25180b000000e6e6e6494949a7a7a7100805685e443d2d237daf55ffe103fb00ff00000000afff98834a370e007d5237a1b25d5e6c5a843838c1b8be000000555555969696bababae7d24ceaec182673a97ac3f6ffe8a3f728e100000026be1a0f5b092673a9f621da000000fffffffe4cff0048d86a006a980098159a001f3aac282849365cffd3a46efe0000ffe3b3fffffe46745faa656500000075b5a2d47eb1ba7295e5acb3f7d3de1d00203e3c245e6844688a854545452727270606065d5d5d5d5d5da3a3a3cecece3a3a3a31221a1b110c685e44868c65ff0000aa0000dfdfff19434123079ceacc3f6be1573393555241071f6a07d0a2367d5a09ff5e56cd2b27ffdc8f64cae0631763080000ebebebcbcbcba7a7a7d6d6d65c5c5c707070191919a9744162472c3a332c000000151515274bfbffb400ffec3a0000002196f3ffffffffffffafbcba0226520541730000000000ffff000000ff004377e7080000fcfcfcd6d6d69e2835c8eac5193d3fcf355938744a5ca443261c27c2d06089d0b70c38701021580f54770000001d301f428d6700ffa800ffa80504069271c0e9e0fbafbfd20000004f6781ffffff000000ffffff2ce8f4e53b44e7fef70000007999e751a16ce4a672743f393f2832b86f50e1fc9cb4fa577df50443da001f6fbfffffff003d65470b27bb4cfbf0d9feddb6f8d389fc591031940b0f65ffe60a9e87271d44ffffff415f7492bda0",
    "0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00F296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00F296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00F296178d553C8Ec21A2fBD2c5dDa8CA9ac905A009Bf043a72ca1cD3DC4BCa66c9F6c1d040CfF77729Bf043a72ca1cD3DC4BCa66c9F6c1d040CfF77728e29B3F71a8c7276d122C88d9bf317e857ABb3768e29B3F71a8c7276d122C88d9bf317e857ABb3769Bf043a72ca1cD3DC4BCa66c9F6c1d040CfF77728e29B3F71a8c7276d122C88d9bf317e857ABb3769Bf043a72ca1cD3DC4BCa66c9F6c1d040CfF77729Bf043a72ca1cD3DC4BCa66c9F6c1d040CfF77729Bf043a72ca1cD3DC4BCa66c9F6c1d040CfF77728e29B3F71a8c7276d122C88d9bf317e857ABb3768e29B3F71a8c7276d122C88d9bf317e857ABb376F296178d553C8Ec21A2fBD2c5dDa8CA9ac905A008e29B3F71a8c7276d122C88d9bf317e857ABb3769Bf043a72ca1cD3DC4BCa66c9F6c1d040CfF77728e29B3F71a8c7276d122C88d9bf317e857ABb3769Bf043a72ca1cD3DC4BCa66c9F6c1d040CfF77729Bf043a72ca1cD3DC4BCa66c9F6c1d040CfF77728e29B3F71a8c7276d122C88d9bf317e857ABb3768e29B3F71a8c7276d122C88d9bf317e857ABb3769Bf043a72ca1cD3DC4BCa66c9F6c1d040CfF77729Bf043a72ca1cD3DC4BCa66c9F6c1d040CfF77728e29B3F71a8c7276d122C88d9bf317e857ABb3769Bf043a72ca1cD3DC4BCa66c9F6c1d040CfF77728e29B3F71a8c7276d122C88d9bf317e857ABb3768e29B3F71a8c7276d122C88d9bf317e857ABb376d42bd96B117dd6BD63280620EA981BF967A7aD2Bd42bd96B117dd6BD63280620EA981BF967A7aD2Bd42bd96B117dd6BD63280620EA981BF967A7aD2Bd42bd96B117dd6BD63280620EA981BF967A7aD2Bd42bd96B117dd6BD63280620EA981BF967A7aD2Bd42bd96B117dd6BD63280620EA981BF967A7aD2Bd42bd96B117dd6BD63280620EA981BF967A7aD2Bd42bd96B117dd6BD63280620EA981BF967A7aD2Bd42bd96B117dd6BD63280620EA981BF967A7aD2Bd42bd96B117dd6BD63280620EA981BF967A7aD2B0fb95b8C2d19F1Cbd2dfe9ECB3BdF992cB9E8b920fb95b8C2d19F1Cbd2dfe9ECB3BdF992cB9E8b920fb95b8C2d19F1Cbd2dfe9ECB3BdF992cB9E8b92F296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00F296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00d1e0eb60Bda1c098353D08a167B011EA8bcd38Fad1e0eb60Bda1c098353D08a167B011EA8bcd38FaA99b0DF82C4e1FB5454F9E624B5DEc5BE025823E6EBd8991fC87F130DE28DE4b37F882d6cbE9aB286EBd8991fC87F130DE28DE4b37F882d6cbE9aB286EBd8991fC87F130DE28DE4b37F882d6cbE9aB286EBd8991fC87F130DE28DE4b37F882d6cbE9aB28C5fFbCd8A374889c6e95f8df733e32A0e9476a9cfB843f8c4992EfDb6b42349C35f025ca55742D3348A63097E1Ac123b1f5A8bbfFafA4afa8192FaB0A99b0DF82C4e1FB5454F9E624B5DEc5BE025823Ed1e0eb60Bda1c098353D08a167B011EA8bcd38FaA99b0DF82C4e1FB5454F9E624B5DEc5BE025823EA99b0DF82C4e1FB5454F9E624B5DEc5BE025823EE7bd51Dc30d4bDc9FDdD42eA7c0a283590C9D416A99b0DF82C4e1FB5454F9E624B5DEc5BE025823EA99b0DF82C4e1FB5454F9E624B5DEc5BE025823EA99b0DF82C4e1FB5454F9E624B5DEc5BE025823EC5fFbCd8A374889c6e95f8df733e32A0e9476a9cC5fFbCd8A374889c6e95f8df733e32A0e9476a9cC5fFbCd8A374889c6e95f8df733e32A0e9476a9cC5fFbCd8A374889c6e95f8df733e32A0e9476a9cC5fFbCd8A374889c6e95f8df733e32A0e9476a9cC5fFbCd8A374889c6e95f8df733e32A0e9476a9cA99b0DF82C4e1FB5454F9E624B5DEc5BE025823EA99b0DF82C4e1FB5454F9E624B5DEc5BE025823EA99b0DF82C4e1FB5454F9E624B5DEc5BE025823EA99b0DF82C4e1FB5454F9E624B5DEc5BE025823EA99b0DF82C4e1FB5454F9E624B5DEc5BE025823EA99b0DF82C4e1FB5454F9E624B5DEc5BE025823EC5fFbCd8A374889c6e95f8df733e32A0e9476a9cC5fFbCd8A374889c6e95f8df733e32A0e9476a9cC5fFbCd8A374889c6e95f8df733e32A0e9476a9cC5fFbCd8A374889c6e95f8df733e32A0e9476a9cf4c9C5229356d39b4F852ecF6E08576EebEDB0ECA99b0DF82C4e1FB5454F9E624B5DEc5BE025823EA99b0DF82C4e1FB5454F9E624B5DEc5BE025823EF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A0006Ac1F9f86520225b73EFCe4982c9d9505753251d1e0eb60Bda1c098353D08a167B011EA8bcd38FaF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00f4c9C5229356d39b4F852ecF6E08576EebEDB0EC92572aae1c9C4BA92011a6A56579c79dBb272Cd8d42bd96B117dd6BD63280620EA981BF967A7aD2Bd42bd96B117dd6BD63280620EA981BF967A7aD2BF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00F296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00F296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00F296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00fB843f8c4992EfDb6b42349C35f025ca55742D33F296178d553C8Ec21A2fBD2c5dDa8CA9ac905A009f2942fF27e40445d3CB2aAD90F84C3a03574F26eE463034F385DD9B26efD7767406079f86edB9929f2942fF27e40445d3CB2aAD90F84C3a03574F26eE463034F385DD9B26efD7767406079f86edB992eE463034F385DD9B26efD7767406079f86edB992"
  ],
  "numDeployments": 2,
  "solcInputHash": "1525714336827f70146c723be79ac75f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"tokenData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"creators\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenCreatorOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenDataOf\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/blitoadz/Blitmap.sol\":\"Blitmap\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":2000},\"remappings\":[]},\"sources\":{\"contracts/blitoadz/Blitmap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\nimport \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\nimport \\\"../interfaces/IBlitmap.sol\\\";\\n\\ncontract Blitmap is IBlitmap {\\n    bytes _tokenData;\\n    bytes _creators;\\n\\n    constructor(bytes memory tokenData, bytes memory creators) {\\n        _tokenData = tokenData;\\n        _creators = creators;\\n    }\\n\\n    function tokenDataOf(uint256 tokenId) public view returns (bytes memory) {\\n        return BytesLib.slice(_tokenData, tokenId * 12, 12);\\n    }\\n\\n    function tokenCreatorOf(uint256 tokenId) public view returns (address) {\\n        return BytesLib.toAddress(_creators, tokenId * 20);\\n    }\\n}\\n\",\"keccak256\":\"0x57e37ede7b15191fe7fb879f283f77e9d3fd2c4ec8990563d12f5ea690dc714a\",\"license\":\"MIT\"},\"contracts/interfaces/IBlitmap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\ninterface IBlitmap {\\n    function tokenDataOf(uint256 tokenId) external view returns (bytes memory);\\n\\n    function tokenCreatorOf(uint256 tokenId) external view returns (address);\\n}\\n\",\"keccak256\":\"0x4299b50a5608f133a879616e159140166040bf4612225a1f37e701afbb49f776\",\"license\":\"MIT\"},\"solidity-bytes-utils/contracts/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xf75784dfc94ea43668eb195d5690a1dde1b6eda62017e73a3899721583821d29\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620008c8380380620008c883398101604081905262000034916200024b565b81516200004990600090602085019062000068565b5080516200005f90600190602084019062000068565b5050506200030e565b8280546200007690620002dd565b90600052602060002090601f0160209004810192826200009a5760008555620000e5565b82601f10620000b557805160ff1916838001178555620000e5565b82800160010185558215620000e5579182015b82811115620000e5578251825591602001919060010190620000c8565b50620000f3929150620000f7565b5090565b5b80821115620000f35760008155600101620000f8565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681016001600160401b03811182821017156200014c576200014c6200010e565b6040525050565b60006200015f60405190565b90506200016d828262000124565b919050565b60006001600160401b038211156200018e576200018e6200010e565b601f19601f83011660200192915050565b60005b83811015620001bc578181015183820152602001620001a2565b83811115620001cc576000848401525b50505050565b6000620001e9620001e38462000172565b62000153565b905082815260208101848484011115620002065762000206600080fd5b620002138482856200019f565b509392505050565b600082601f830112620002315762000231600080fd5b815162000243848260208601620001d2565b949350505050565b60008060408385031215620002635762000263600080fd5b82516001600160401b038111156200027e576200027e600080fd5b6200028c858286016200021b565b602085015190935090506001600160401b03811115620002af57620002af600080fd5b620002bd858286016200021b565b9150509250929050565b634e487b7160e01b600052602260045260246000fd5b600281046001821680620002f257607f821691505b60208210811415620003085762000308620002c7565b50919050565b6105aa806200031e6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806306daaebd1461003b578063c0da9bcd14610064575b600080fd5b61004e6100493660046102ee565b610084565b60405161005b9190610344565b60405180910390f35b6100776100723660046102ee565b61012c565b60405161005b91906103b4565b600061012660018054610096906103fb565b80601f01602080910402602001604051908101604052809291908181526020018280546100c2906103fb565b801561010f5780601f106100e45761010080835404028352916020019161010f565b820191906000526020600020905b8154815290600101906020018083116100f257829003601f168201915b50505050508360146101219190610457565b6101d0565b92915050565b60606101266000805461013e906103fb565b80601f016020809104026020016040519081016040528092919081815260200182805461016a906103fb565b80156101b75780601f1061018c576101008083540402835291602001916101b7565b820191906000526020600020905b81548152906001019060200180831161019a57829003601f168201915b505050505083600c6101c99190610457565b600c61021f565b60006101dd826014610494565b835110156102065760405162461bcd60e51b81526004016101fd906104e0565b60405180910390fd5b5001602001516c01000000000000000000000000900490565b60608161022d81601f610494565b101561024b5760405162461bcd60e51b81526004016101fd90610522565b6102558284610494565b845110156102755760405162461bcd60e51b81526004016101fd90610564565b60608215801561029457604051915060008252602082016040526102de565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156102cd5780518352602092830192016102b5565b5050858452601f01601f1916604052505b50949350505050565b8035610126565b60006020828403121561030357610303600080fd5b600061030f84846102e7565b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff8216610126565b61033e81610317565b82525050565b602081016101268284610335565b60005b8381101561036d578181015183820152602001610355565b8381111561037c576000848401525b50505050565b600061038c825190565b8084526020840193506103a3818560208601610352565b601f01601f19169290920192915050565b602080825281016103c58184610382565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60028104600182168061040f57607f821691505b60208210811415610422576104226103cc565b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561048f5761048f610428565b500290565b600082198211156104a7576104a7610428565b500190565b60158152602081017f746f416464726573735f6f75744f66426f756e64730000000000000000000000815290505b60200190565b60208082528101610126816104ac565b600e8152602081017f736c6963655f6f766572666c6f77000000000000000000000000000000000000815290506104da565b60208082528101610126816104f0565b60118152602081017f736c6963655f6f75744f66426f756e6473000000000000000000000000000000815290506104da565b602080825281016101268161053256fea2646970667358221220cefff2ae08011c6ef527df1f44ee7626d7ca275b7036cfa0687e451f994d58ba64736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c806306daaebd1461003b578063c0da9bcd14610064575b600080fd5b61004e6100493660046102ee565b610084565b60405161005b9190610344565b60405180910390f35b6100776100723660046102ee565b61012c565b60405161005b91906103b4565b600061012660018054610096906103fb565b80601f01602080910402602001604051908101604052809291908181526020018280546100c2906103fb565b801561010f5780601f106100e45761010080835404028352916020019161010f565b820191906000526020600020905b8154815290600101906020018083116100f257829003601f168201915b50505050508360146101219190610457565b6101d0565b92915050565b60606101266000805461013e906103fb565b80601f016020809104026020016040519081016040528092919081815260200182805461016a906103fb565b80156101b75780601f1061018c576101008083540402835291602001916101b7565b820191906000526020600020905b81548152906001019060200180831161019a57829003601f168201915b505050505083600c6101c99190610457565b600c61021f565b60006101dd826014610494565b835110156102065760405162461bcd60e51b81526004016101fd906104e0565b60405180910390fd5b5001602001516c01000000000000000000000000900490565b60608161022d81601f610494565b101561024b5760405162461bcd60e51b81526004016101fd90610522565b6102558284610494565b845110156102755760405162461bcd60e51b81526004016101fd90610564565b60608215801561029457604051915060008252602082016040526102de565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156102cd5780518352602092830192016102b5565b5050858452601f01601f1916604052505b50949350505050565b8035610126565b60006020828403121561030357610303600080fd5b600061030f84846102e7565b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff8216610126565b61033e81610317565b82525050565b602081016101268284610335565b60005b8381101561036d578181015183820152602001610355565b8381111561037c576000848401525b50505050565b600061038c825190565b8084526020840193506103a3818560208601610352565b601f01601f19169290920192915050565b602080825281016103c58184610382565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60028104600182168061040f57607f821691505b60208210811415610422576104226103cc565b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561048f5761048f610428565b500290565b600082198211156104a7576104a7610428565b500190565b60158152602081017f746f416464726573735f6f75744f66426f756e64730000000000000000000000815290505b60200190565b60208082528101610126816104ac565b600e8152602081017f736c6963655f6f766572666c6f77000000000000000000000000000000000000815290506104da565b60208082528101610126816104f0565b60118152602081017f736c6963655f6f75744f66426f756e6473000000000000000000000000000000815290506104da565b602080825281016101268161053256fea2646970667358221220cefff2ae08011c6ef527df1f44ee7626d7ca275b7036cfa0687e451f994d58ba64736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1118,
        "contract": "contracts/blitoadz/Blitmap.sol:Blitmap",
        "label": "_tokenData",
        "offset": 0,
        "slot": "0",
        "type": "t_bytes_storage"
      },
      {
        "astId": 1120,
        "contract": "contracts/blitoadz/Blitmap.sol:Blitmap",
        "label": "_creators",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes_storage"
      }
    ],
    "types": {
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      }
    }
  }
}