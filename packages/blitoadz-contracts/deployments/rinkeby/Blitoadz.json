{
  "address": "0x1111D88E8b72B311645d2779AD48b77eA7eb41cd",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_rendererAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_founders",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "withdrawnAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint16",
              "name": "shares",
              "type": "uint16"
            },
            {
              "internalType": "uint8",
              "name": "remainingAllocation",
              "type": "uint8"
            }
          ],
          "internalType": "struct Blitoadz.Founder[]",
          "name": "_foundersData",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "_blitmapCreatorShares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_blitmap",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AllocationExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalToCurrentOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApproveToCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceQueryForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BlitmapIndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BlitoadzDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BlitoadzExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncorrectPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintZeroQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NothingToWithdraw",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerIndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PublicSaleNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ToadzAndBlitmapLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ToadzIndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenIndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "URIQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawalFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawalQueryForNonexistentToken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BlitmapCreatorWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FounderWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PublicSaleOpened",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newRenderer",
          "type": "address"
        }
      ],
      "name": "RendererChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BLITMAP_COUNT",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BLITOADZ_COUNT",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_PUBLIC_PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOADZ_COUNT",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blitmap",
      "outputs": [
        {
          "internalType": "contract IBlitmap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blitmapCreatorShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "blitoadz",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "toadzId",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "blitmapId",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "paletteOrder",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "withdrawn",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "blitoadzExist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "founders",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "withdrawnAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint16",
          "name": "shares",
          "type": "uint16"
        },
        {
          "internalType": "uint8",
          "name": "remainingAllocation",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPublicSaleOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "toadzIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "blitmapIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "paletteOrders",
          "type": "uint256[]"
        }
      ],
      "name": "mintAllocation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "toadzIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "blitmapIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "paletteOrders",
          "type": "uint256[]"
        }
      ],
      "name": "mintPublicSale",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openPublicSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicSaleStartTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renderingContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_renderingContractAddress",
          "type": "address"
        }
      ],
      "name": "setRenderingContractAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "toadzId",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "blitmapId",
          "type": "uint8"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawBlitmapCreator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFounder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x4ff36c6feba7c910a2823e2e58ad830f9525dba1315e03b49b5efe1c1a3eed7f",
  "receipt": {
    "to": null,
    "from": "0x6966Bdb480e7f7A48A7f6B198eE8b9462A265401",
    "contractAddress": "0x1111D88E8b72B311645d2779AD48b77eA7eb41cd",
    "transactionIndex": 9,
    "gasUsed": "3040058",
    "logsBloom": "0x
    "blockHash": "0x79ced141c83606d9c716b32ca47a9f41ce0c3538fd4ee1baf11037109274a4e2",
    "transactionHash": "0x4ff36c6feba7c910a2823e2e58ad830f9525dba1315e03b49b5efe1c1a3eed7f",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 10377307,
        "transactionHash": "0x4ff36c6feba7c910a2823e2e58ad830f9525dba1315e03b49b5efe1c1a3eed7f",
        "address": "0x1111D88E8b72B311645d2779AD48b77eA7eb41cd",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006966bdb480e7f7a48a7f6b198ee8b9462a265401"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x79ced141c83606d9c716b32ca47a9f41ce0c3538fd4ee1baf11037109274a4e2"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 10377307,
        "transactionHash": "0x4ff36c6feba7c910a2823e2e58ad830f9525dba1315e03b49b5efe1c1a3eed7f",
        "address": "0x1111D88E8b72B311645d2779AD48b77eA7eb41cd",
        "topics": [
          "0xa00632ff71f043bcebbaa26952d3fd31a42e459b0dc8b686a91eb77725ee6680"
        ],
        "data": "0x000000000000000000000000e4a4b2d225ec4769377bac80cb8c49173c158b8d",
        "logIndex": 7,
        "blockHash": "0x79ced141c83606d9c716b32ca47a9f41ce0c3538fd4ee1baf11037109274a4e2"
      }
    ],
    "blockNumber": 10377307,
    "cumulativeGasUsed": "9158478",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Blitoadz",
    "BLTZ",
    "0xe4a4b2d225eC4769377bAc80CB8C49173C158b8d",
    [
      "0xD246882E05D7DdB2C8476607312279f592789Cd6",
      "0x0C3c184C2c5Fc99aED927cE3513141eb3Ce684FA",
      "0xCADb5Aba304867FD2658f11c2EE41ed3A83f13D5",
      "0xFc7c18A7F0d53A924D6aF07814c47eEf0Fb4F7d7",
      "0x4298e663517593284Ad4FE199b21815BD48a9969",
      "0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00"
    ],
    [
      {
        "shares": 1680,
        "withdrawnAmount": 0,
        "remainingAllocation": 5
      },
      {
        "shares": 1400,
        "withdrawnAmount": 0,
        "remainingAllocation": 12
      },
      {
        "shares": 628,
        "withdrawnAmount": 0,
        "remainingAllocation": 5
      },
      {
        "shares": 628,
        "withdrawnAmount": 0,
        "remainingAllocation": 5
      },
      {
        "shares": 312,
        "withdrawnAmount": 0,
        "remainingAllocation": 2
      },
      {
        "shares": 0,
        "withdrawnAmount": 0,
        "remainingAllocation": 1
      }
    ],
    952,
    "0xe9AA8703C9c31BB4Ff6054308a7ccDb24815627b"
  ],
  "numDeployments": 3,
  "solcInputHash": "fee8f830d515593c3c611bbefb2054d1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_rendererAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_founders\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"withdrawnAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"shares\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"remainingAllocation\",\"type\":\"uint8\"}],\"internalType\":\"struct Blitoadz.Founder[]\",\"name\":\"_foundersData\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"_blitmapCreatorShares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_blitmap\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AllocationExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BlitmapIndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BlitoadzDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BlitoadzExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerIndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PublicSaleNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ToadzAndBlitmapLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ToadzIndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenIndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawalFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawalQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BlitmapCreatorWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FounderWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PublicSaleOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRenderer\",\"type\":\"address\"}],\"name\":\"RendererChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BLITMAP_COUNT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BLITOADZ_COUNT\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_PUBLIC_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOADZ_COUNT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blitmap\",\"outputs\":[{\"internalType\":\"contract IBlitmap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blitmapCreatorShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blitoadz\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"toadzId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"blitmapId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"paletteOrder\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"withdrawn\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blitoadzExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"founders\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"withdrawnAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"shares\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"remainingAllocation\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPublicSaleOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"toadzIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"blitmapIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"paletteOrders\",\"type\":\"uint256[]\"}],\"name\":\"mintAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"toadzIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"blitmapIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"paletteOrders\",\"type\":\"uint256[]\"}],\"name\":\"mintPublicSale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openPublicSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleStartTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renderingContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_renderingContractAddress\",\"type\":\"address\"}],\"name\":\"setRenderingContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"toadzId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"blitmapId\",\"type\":\"uint8\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"withdrawBlitmapCreator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFounder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}. This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first. It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}. This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first. It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/blitoadz/Blitoadz.sol\":\"Blitoadz\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/blitoadz/Blitoadz.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"erc721a/contracts/ERC721A.sol\\\";\\nimport \\\"../interfaces/IBlitoadzRenderer.sol\\\";\\nimport \\\"../interfaces/BlitoadzTypes.sol\\\";\\nimport \\\"../interfaces/IBlitmap.sol\\\";\\n\\ncontract OwnableDelegateProxy {}\\n\\ncontract ProxyRegistry {\\n    mapping(address => OwnableDelegateProxy) public proxies;\\n}\\n\\nerror PublicSaleOpen();\\nerror PublicSaleNotOpen();\\nerror BlitoadzExists();\\nerror ToadzIndexOutOfBounds();\\nerror BlitmapIndexOutOfBounds();\\nerror NothingToWithdraw();\\nerror WithdrawalFailed();\\nerror ToadzAndBlitmapLengthMismatch();\\nerror IncorrectPrice();\\nerror WithdrawalQueryForNonexistentToken();\\nerror AllocationExceeded();\\nerror BlitoadzDoesNotExist();\\n\\ncontract Blitoadz is ERC721A, Ownable, ReentrancyGuard {\\n    // Constants\\n    uint256 public constant MINT_PUBLIC_PRICE = 0.056 ether;\\n    uint8 public constant TOADZ_COUNT = 56;\\n    uint8 public constant BLITMAP_COUNT = 100;\\n    uint16 public constant BLITOADZ_COUNT = 5_600;\\n    IBlitmap public blitmap;\\n\\n    // Blitoadz states variables\\n    bool[BLITOADZ_COUNT] public blitoadzExist;\\n    BlitoadzTypes.Blitoadz[] public blitoadz;\\n    uint256 receivedAmount;\\n\\n    // Blitoadz funds split\\n    uint256 public blitmapCreatorShares;\\n    mapping(address => Founder) public founders;\\n\\n    struct Founder {\\n        uint128 withdrawnAmount;\\n        uint16 shares;\\n        uint8 remainingAllocation;\\n    }\\n\\n    // Events\\n    event PublicSaleOpened(uint256 timestamp);\\n    event RendererChanged(address newRenderer);\\n    event BlitmapCreatorWithdrawn(address account, uint256 amount);\\n    event FounderWithdrawn(address account, uint256 amount);\\n\\n    ////////////////////////////////////////////////////////////////////////\\n    ////////////////////////// Schedule ////////////////////////////////////\\n    ////////////////////////////////////////////////////////////////////////\\n    uint256 public publicSaleStartTimestamp;\\n\\n    function isPublicSaleOpen() public view returns (bool) {\\n        return\\n            block.timestamp > publicSaleStartTimestamp &&\\n            publicSaleStartTimestamp != 0;\\n    }\\n\\n    modifier whenPublicSaleOpen() {\\n        if (!isPublicSaleOpen()) revert PublicSaleNotOpen();\\n        _;\\n    }\\n\\n    modifier whenPublicSaleClosed() {\\n        if (isPublicSaleOpen()) revert PublicSaleNotOpen();\\n        _;\\n    }\\n\\n    function openPublicSale() external onlyOwner whenPublicSaleClosed {\\n        publicSaleStartTimestamp = block.timestamp;\\n        emit PublicSaleOpened(publicSaleStartTimestamp);\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////\\n    ////////////////////////// Token ///////////////////////////////////////\\n    ////////////////////////////////////////////////////////////////////////\\n    address public renderingContractAddress;\\n    IBlitoadzRenderer renderer;\\n\\n    function setRenderingContractAddress(address _renderingContractAddress)\\n        public\\n        onlyOwner\\n    {\\n        renderingContractAddress = _renderingContractAddress;\\n        renderer = IBlitoadzRenderer(renderingContractAddress);\\n        emit RendererChanged(renderingContractAddress);\\n    }\\n\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        address _rendererAddress,\\n        address[] memory _founders,\\n        Founder[] memory _foundersData,\\n        uint256 _blitmapCreatorShares,\\n        address _blitmap\\n    ) ERC721A(name_, symbol_) {\\n        setRenderingContractAddress(_rendererAddress);\\n\\n        for (uint256 i = 0; i < _founders.length; i++) {\\n            founders[_founders[i]] = _foundersData[i];\\n        }\\n\\n        blitmapCreatorShares = _blitmapCreatorShares;\\n        blitmap = IBlitmap(_blitmap);\\n    }\\n\\n    function _mint(\\n        address to,\\n        uint256[] calldata toadzIds,\\n        uint256[] calldata blitmapIds,\\n        uint256[] calldata paletteOrders,\\n        bool isBlitoadzPayable\\n    ) internal {\\n        for (uint256 i = 0; i < toadzIds.length; i++) {\\n            uint256 toadzId = toadzIds[i];\\n            uint256 blitmapId = blitmapIds[i];\\n            if (blitoadzExist[toadzId * BLITMAP_COUNT + blitmapId])\\n                revert BlitoadzExists();\\n            if (toadzId > TOADZ_COUNT - 1) revert ToadzIndexOutOfBounds();\\n            if (blitmapId > BLITMAP_COUNT - 1) revert BlitmapIndexOutOfBounds();\\n            blitoadz.push(\\n                BlitoadzTypes.Blitoadz(\\n                    uint8(toadzId % type(uint8).max),\\n                    uint8(blitmapId % type(uint8).max),\\n                    uint8(paletteOrders[i] % type(uint8).max),\\n                    !isBlitoadzPayable\\n                )\\n            );\\n            blitoadzExist[toadzId * BLITMAP_COUNT + blitmapId] = true;\\n        }\\n\\n        _safeMint(to, toadzIds.length);\\n    }\\n\\n    function mintPublicSale(\\n        uint256[] calldata toadzIds,\\n        uint256[] calldata blitmapIds,\\n        uint256[] calldata paletteOrders\\n    ) external payable whenPublicSaleOpen nonReentrant {\\n        if (toadzIds.length != blitmapIds.length)\\n            revert ToadzAndBlitmapLengthMismatch();\\n        if (msg.value != MINT_PUBLIC_PRICE * toadzIds.length)\\n            revert IncorrectPrice();\\n\\n        _mint(_msgSender(), toadzIds, blitmapIds, paletteOrders, true);\\n        receivedAmount += MINT_PUBLIC_PRICE * toadzIds.length;\\n    }\\n\\n    function mintAllocation(\\n        uint256[] calldata toadzIds,\\n        uint256[] calldata blitmapIds,\\n        uint256[] calldata paletteOrders\\n    ) external nonReentrant {\\n        if (toadzIds.length != blitmapIds.length)\\n            revert ToadzAndBlitmapLengthMismatch();\\n        if (founders[_msgSender()].remainingAllocation < toadzIds.length)\\n            revert AllocationExceeded();\\n        founders[_msgSender()].remainingAllocation -= uint8(\\n            toadzIds.length % type(uint8).max\\n        );\\n        _mint(_msgSender(), toadzIds, blitmapIds, paletteOrders, false);\\n    }\\n\\n    function withdrawBlitmapCreator(uint256[] calldata tokenIds)\\n        external\\n        nonReentrant\\n        returns (bool)\\n    {\\n        uint256 value = 0;\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            if (!_exists(tokenIds[i]))\\n                revert WithdrawalQueryForNonexistentToken();\\n            if (\\n                blitmap.tokenCreatorOf(blitoadz[tokenIds[i]].blitmapId) !=\\n                _msgSender()\\n            ) {\\n                continue;\\n            }\\n            if (blitoadz[tokenIds[i]].withdrawn) {\\n                continue;\\n            }\\n            value++;\\n            blitoadz[tokenIds[i]].withdrawn = true;\\n        }\\n        if (value == 0) revert NothingToWithdraw();\\n        value =\\n            (value * MINT_PUBLIC_PRICE * blitmapCreatorShares) /\\n            BLITOADZ_COUNT;\\n        (bool success, ) = _msgSender().call{value: value}(\\\"\\\");\\n        if (!success) revert WithdrawalFailed();\\n\\n        emit BlitmapCreatorWithdrawn(_msgSender(), value);\\n        return success;\\n    }\\n\\n    function withdrawFounder() external nonReentrant returns (bool) {\\n        uint256 value = (receivedAmount * founders[_msgSender()].shares) /\\n            BLITOADZ_COUNT -\\n            founders[_msgSender()].withdrawnAmount;\\n        if (value == 0) revert NothingToWithdraw();\\n        founders[_msgSender()].withdrawnAmount += uint128(\\n            value % type(uint128).max\\n        );\\n        (bool success, ) = _msgSender().call{value: value}(\\\"\\\");\\n        if (!success) revert WithdrawalFailed();\\n\\n        emit FounderWithdrawn(_msgSender(), value);\\n        return success;\\n    }\\n\\n    function tokenURI(uint8 toadzId, uint8 blitmapId)\\n        external\\n        view\\n        returns (string memory)\\n    {\\n        for (uint256 i = 0; i < blitoadz.length; i++) {\\n            if (\\n                blitoadz[i].toadzId == toadzId &&\\n                blitoadz[i].blitmapId == blitmapId\\n            ) {\\n                return tokenURI(i);\\n            }\\n        }\\n        revert BlitoadzDoesNotExist();\\n    }\\n\\n    function tokenURI(uint256 _tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        if (!_exists(_tokenId)) revert URIQueryForNonexistentToken();\\n        if (renderingContractAddress == address(0)) {\\n            return \\\"\\\";\\n        }\\n\\n        return renderer.tokenURI(blitoadz[_tokenId]);\\n    }\\n\\n    function exists(uint256 _tokenId) external view returns (bool) {\\n        return _exists(_tokenId);\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xeb86f8af480c65838c19a87063c1c8ca2649a7df0f7b44badee60147d9db5ed9\",\"license\":\"MIT\"},\"contracts/interfaces/BlitoadzTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\ninterface BlitoadzTypes {\\n    struct Blitoadz {\\n        uint8 toadzId;\\n        uint8 blitmapId;\\n        uint8 paletteOrder;\\n        bool withdrawn;\\n    }\\n}\\n\",\"keccak256\":\"0x6212890101fc49f404b7d085dfaf376eb583f84ddfb6cd34f70336a44caa781b\",\"license\":\"MIT\"},\"contracts/interfaces/IBlitmap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\ninterface IBlitmap {\\n    function tokenDataOf(uint256 tokenId) external view returns (bytes memory);\\n\\n    function tokenCreatorOf(uint256 tokenId) external view returns (address);\\n\\n    function tokenNameOf(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6bb0fce880be0ac54e396a1aa4ddce98139a12a96c6ccd884ba3c0324128e792\",\"license\":\"MIT\"},\"contracts/interfaces/IBlitoadzRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"./BlitoadzTypes.sol\\\";\\n\\ninterface IBlitoadzRenderer {\\n    function tokenURI(BlitoadzTypes.Blitoadz calldata blitoadz)\\n        external\\n        view\\n        returns (string memory);\\n}\\n\",\"keccak256\":\"0xddc15d54ecb9e937683ddbf7a674bf4b8722300ad66d76ede80deaffbdda38c3\",\"license\":\"MIT\"},\"erc721a/contracts/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\\n\\nerror ApprovalCallerNotOwnerNorApproved();\\nerror ApprovalQueryForNonexistentToken();\\nerror ApproveToCaller();\\nerror ApprovalToCurrentOwner();\\nerror BalanceQueryForZeroAddress();\\nerror MintedQueryForZeroAddress();\\nerror BurnedQueryForZeroAddress();\\nerror MintToZeroAddress();\\nerror MintZeroQuantity();\\nerror OwnerIndexOutOfBounds();\\nerror OwnerQueryForNonexistentToken();\\nerror TokenIndexOutOfBounds();\\nerror TransferCallerNotOwnerNorApproved();\\nerror TransferFromIncorrectOwner();\\nerror TransferToNonERC721ReceiverImplementer();\\nerror TransferToZeroAddress();\\nerror URIQueryForNonexistentToken();\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata and Enumerable extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at 0 (e.g. 0, 1, 2, 3..).\\n *\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n *\\n * Assumes that the maximum token id cannot exceed 2**128 - 1 (max value of uint128).\\n */\\ncontract ERC721A is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n    }\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct AddressData {\\n        // Realistically, 2**64-1 is more than enough.\\n        uint64 balance;\\n        // Keeps track of mint count with minimal overhead for tokenomics.\\n        uint64 numberMinted;\\n        // Keeps track of burn count with minimal overhead for tokenomics.\\n        uint64 numberBurned;\\n    }\\n\\n    // Compiler will pack the following \\n    // _currentIndex and _burnCounter into a single 256bit word.\\n    \\n    // The tokenId of the next token to be minted.\\n    uint128 internal _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint128 internal _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\\n    mapping(uint256 => TokenOwnership) internal _ownerships;\\n\\n    // Mapping owner address to address data\\n    mapping(address => AddressData) private _addressData;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than _currentIndex times\\n        unchecked {\\n            return _currentIndex - _burnCounter;    \\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     * This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first.\\n     * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\\n     */\\n    function tokenByIndex(uint256 index) public view override returns (uint256) {\\n        uint256 numMintedSoFar = _currentIndex;\\n        uint256 tokenIdsIdx;\\n\\n        // Counter overflow is impossible as the loop breaks when\\n        // uint256 i is equal to another uint256 numMintedSoFar.\\n        unchecked {\\n            for (uint256 i; i < numMintedSoFar; i++) {\\n                TokenOwnership memory ownership = _ownerships[i];\\n                if (!ownership.burned) {\\n                    if (tokenIdsIdx == index) {\\n                        return i;\\n                    }\\n                    tokenIdsIdx++;\\n                }\\n            }\\n        }\\n        revert TokenIndexOutOfBounds();\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     * This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first.\\n     * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {\\n        if (index >= balanceOf(owner)) revert OwnerIndexOutOfBounds();\\n        uint256 numMintedSoFar = _currentIndex;\\n        uint256 tokenIdsIdx;\\n        address currOwnershipAddr;\\n\\n        // Counter overflow is impossible as the loop breaks when\\n        // uint256 i is equal to another uint256 numMintedSoFar.\\n        unchecked {\\n            for (uint256 i; i < numMintedSoFar; i++) {\\n                TokenOwnership memory ownership = _ownerships[i];\\n                if (ownership.burned) {\\n                    continue;\\n                }\\n                if (ownership.addr != address(0)) {\\n                    currOwnershipAddr = ownership.addr;\\n                }\\n                if (currOwnershipAddr == owner) {\\n                    if (tokenIdsIdx == index) {\\n                        return i;\\n                    }\\n                    tokenIdsIdx++;\\n                }\\n            }\\n        }\\n\\n        // Execution should never reach this point.\\n        revert();\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            interfaceId == type(IERC721Enumerable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return uint256(_addressData[owner].balance);\\n    }\\n\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        if (owner == address(0)) revert MintedQueryForZeroAddress();\\n        return uint256(_addressData[owner].numberMinted);\\n    }\\n\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        if (owner == address(0)) revert BurnedQueryForZeroAddress();\\n        return uint256(_addressData[owner].numberBurned);\\n    }\\n\\n    /**\\n     * Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\n     */\\n    function ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (curr < _currentIndex) {\\n                TokenOwnership memory ownership = _ownerships[curr];\\n                if (!ownership.burned) {\\n                    if (ownership.addr != address(0)) {\\n                        return ownership;\\n                    }\\n                    // Invariant: \\n                    // There will always be an ownership that has an address and is not burned \\n                    // before an ownership that does not have an address and is not burned.\\n                    // Hence, curr will not underflow.\\n                    while (true) {\\n                        curr--;\\n                        ownership = _ownerships[curr];\\n                        if (ownership.addr != address(0)) {\\n                            return ownership;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return ownershipOf(tokenId).addr;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public override {\\n        address owner = ERC721A.ownerOf(tokenId);\\n        if (to == owner) revert ApprovalToCurrentOwner();\\n\\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\\n            revert ApprovalCallerNotOwnerNorApproved();\\n        }\\n\\n        _approve(to, tokenId, owner);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public override {\\n        if (operator == _msgSender()) revert ApproveToCaller();\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n        if (!_checkOnERC721Received(from, to, tokenId, _data)) {\\n            revert TransferToNonERC721ReceiverImplementer();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return tokenId < _currentIndex && !_ownerships[tokenId].burned;\\n    }\\n\\n    function _safeMint(address to, uint256 quantity) internal {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal {\\n        _mint(to, quantity, _data, true);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data,\\n        bool safe\\n    ) internal {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 3.4e38 (2**128) - 1\\n        // updatedIndex overflows if _currentIndex + quantity > 3.4e38 (2**128) - 1\\n        unchecked {\\n            _addressData[to].balance += uint64(quantity);\\n            _addressData[to].numberMinted += uint64(quantity);\\n\\n            _ownerships[startTokenId].addr = to;\\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\n\\n            uint256 updatedIndex = startTokenId;\\n\\n            for (uint256 i; i < quantity; i++) {\\n                emit Transfer(address(0), to, updatedIndex);\\n                if (safe && !_checkOnERC721Received(address(0), to, updatedIndex, _data)) {\\n                    revert TransferToNonERC721ReceiverImplementer();\\n                }\\n                updatedIndex++;\\n            }\\n\\n            _currentIndex = uint128(updatedIndex);\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) private {\\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\\n\\n        bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\\n            isApprovedForAll(prevOwnership.addr, _msgSender()) ||\\n            getApproved(tokenId) == _msgSender());\\n\\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, prevOwnership.addr);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**128.\\n        unchecked {\\n            _addressData[from].balance -= 1;\\n            _addressData[to].balance += 1;\\n\\n            _ownerships[tokenId].addr = to;\\n            _ownerships[tokenId].startTimestamp = uint64(block.timestamp);\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            if (_ownerships[nextTokenId].addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId < _currentIndex) {\\n                    _ownerships[nextTokenId].addr = prevOwnership.addr;\\n                    _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\\n\\n        _beforeTokenTransfers(prevOwnership.addr, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, prevOwnership.addr);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**128.\\n        unchecked {\\n            _addressData[prevOwnership.addr].balance -= 1;\\n            _addressData[prevOwnership.addr].numberBurned += 1;\\n\\n            // Keep track of who burned the token, and the timestamp of burning.\\n            _ownerships[tokenId].addr = prevOwnership.addr;\\n            _ownerships[tokenId].startTimestamp = uint64(block.timestamp);\\n            _ownerships[tokenId].burned = true;\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            if (_ownerships[nextTokenId].addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId < _currentIndex) {\\n                    _ownerships[nextTokenId].addr = prevOwnership.addr;\\n                    _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(prevOwnership.addr, address(0), tokenId);\\n        _afterTokenTransfers(prevOwnership.addr, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked { \\n            _burnCounter++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(\\n        address to,\\n        uint256 tokenId,\\n        address owner\\n    ) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert TransferToNonERC721ReceiverImplementer();\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n     * minting.\\n     * And also called after one token has been burned.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xfae1341d343abce757109fbff0e9fa7d90de54eecb7fe1d983e0d206e0c62ece\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200386338038062003863833981016040819052620000349162000696565b8651879087906200004d90600190602085019062000282565b5080516200006390600290602084019062000282565b505050620000806200007a6200019160201b60201c565b62000195565b60016008556200009085620001e7565b60005b84518110156200015f57838181518110620000b257620000b2620007ba565b602002602001015160bc6000878481518110620000d357620000d3620007ba565b6020908102919091018101516001600160a01b031682528181019290925260409081016000208351815493850151949092015160ff16600160901b0260ff60901b1961ffff909516600160801b026001600160901b03199094166001600160801b03909316929092179290921792909216919091179055806200015681620007e6565b91505062000093565b5060bb91909155600980546001600160a01b0319166001600160a01b0390921691909117905550620008a79350505050565b3390565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6007546001600160a01b031633146200021d5760405162461bcd60e51b8152600401620002149062000804565b60405180910390fd5b60be80546001600160a01b0383166001600160a01b0319918216811790925560bf8054909116821790556040517fa00632ff71f043bcebbaa26952d3fd31a42e459b0dc8b686a91eb77725ee668091620002779162000850565b60405180910390a150565b828054620002909062000876565b90600052602060002090601f016020900481019282620002b45760008555620002ff565b82601f10620002cf57805160ff1916838001178555620002ff565b82800160010185558215620002ff579182015b82811115620002ff578251825591602001919060010190620002e2565b506200030d92915062000311565b5090565b5b808211156200030d576000815560010162000312565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681016001600160401b038111828210171562000366576200036662000328565b6040525050565b60006200037960405190565b90506200038782826200033e565b919050565b60006001600160401b03821115620003a857620003a862000328565b601f19601f83011660200192915050565b60005b83811015620003d6578181015183820152602001620003bc565b83811115620003e6576000848401525b50505050565b600062000403620003fd846200038c565b6200036d565b905082815260208101848484011115620004205762000420600080fd5b6200042d848285620003b9565b509392505050565b600082601f8301126200044b576200044b600080fd5b81516200045d848260208601620003ec565b949350505050565b60006001600160a01b0382165b92915050565b620004838162000465565b81146200048f57600080fd5b50565b8051620004728162000478565b60006001600160401b03821115620004bb57620004bb62000328565b5060209081020190565b6000620004d6620003fd846200049f565b83815290506020808201908402830185811115620004f757620004f7600080fd5b835b818110156200051d576200050e878262000492565b835260209283019201620004f9565b5050509392505050565b600082601f8301126200053d576200053d600080fd5b81516200045d848260208601620004c5565b6001600160801b03811662000483565b805162000472816200054f565b61ffff811662000483565b805162000472816200056c565b60ff811662000483565b8051620004728162000584565b600060608284031215620005b257620005b2600080fd5b620005be60606200036d565b90506000620005ce84846200055f565b908201526020620005e28484830162000577565b908201526040620005f6848483016200058e565b9082015292915050565b600062000611620003fd846200049f565b83815290506020810160608402830185811115620006325762000632600080fd5b835b818110156200051d576200064987826200059b565b835260209092019160600162000634565b600082601f830112620006705762000670600080fd5b81516200045d84826020860162000600565b8062000483565b8051620004728162000682565b600080600080600080600060e0888a031215620006b657620006b6600080fd5b87516001600160401b03811115620006d157620006d1600080fd5b620006df8a828b0162000435565b60208a015190985090506001600160401b03811115620007025762000702600080fd5b620007108a828b0162000435565b9650506040620007238a828b0162000492565b60608a015190965090506001600160401b03811115620007465762000746600080fd5b620007548a828b0162000527565b60808a015190955090506001600160401b03811115620007775762000777600080fd5b620007858a828b016200065a565b93505060a0620007988a828b0162000689565b92505060c0620007ab8a828b0162000492565b91505092959891949750929550565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415620007fd57620007fd620007d0565b5060010190565b60208082528181019081527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408301526060820162000472565b6200084a8162000465565b82525050565b602081016200047282846200083f565b634e487b7160e01b600052602260045260246000fd5b6002810460018216806200088b57607f821691505b60208210811415620008a157620008a162000860565b50919050565b612fac80620008b76000396000f3fe6080604052600436106102a45760003560e01c806398f539591161016e578063c0c9c735116100cb578063e632751a1161007f578063f140a90011610064578063f140a900146107c7578063f2fde38b146107da578063fca517a7146107fa57600080fd5b8063e632751a1461075e578063e985e9c51461077e57600080fd5b8063d7822c99116100b0578063d7822c99146106af578063dd6c6cef146106c5578063de6746a5146106e557600080fd5b8063c0c9c7351461067a578063c87b56dd1461068f57600080fd5b8063af00972511610122578063b6cfb24211610107578063b6cfb2421461060d578063b88d4fde1461063a578063c074f4121461065a57600080fd5b8063af009725146105d8578063b585209b146105f857600080fd5b80639c51792a116101535780639c51792a14610587578063a22cb465146105a2578063ac156e9b146105c257600080fd5b806398f539591461053557806399c0731b1461056557600080fd5b806342842e0e1161021c5780636352211e116101d0578063715018a6116101b5578063715018a6146104ed5780638da5cb5b1461050257806395d89b411461052057600080fd5b80636352211e146104ad57806370a08231146104cd57600080fd5b80634f558e79116102015780634f558e791461044a5780634f6ccce71461046a57806353557e251461048a57600080fd5b806342842e0e146104155780634bd3f52f1461043557600080fd5b806312b40a9f116102735780631a6949e3116102585780631a6949e3146103c057806323b872dd146103d55780632f745c59146103f557600080fd5b806312b40a9f1461035757806318160ddd1461037757600080fd5b806301ffc9a7146102b057806306fdde03146102e6578063081812fc14610308578063095ea7b31461033557600080fd5b366102ab57005b600080fd5b3480156102bc57600080fd5b506102d06102cb3660046124cf565b61081a565b6040516102dd91906124fa565b60405180910390f35b3480156102f257600080fd5b506102fb6108eb565b6040516102dd9190612566565b34801561031457600080fd5b5061032861032336600461258f565b61097d565b6040516102dd91906125ca565b34801561034157600080fd5b506103556103503660046125ec565b6109da565b005b34801561036357600080fd5b50610355610372366004612629565b610a9a565b34801561038357600080fd5b506103b36000546001600160801b0370010000000000000000000000000000000082048116918116919091031690565b6040516102dd9190612650565b3480156103cc57600080fd5b506102d0610b3d565b3480156103e157600080fd5b506103556103f036600461265e565b610b56565b34801561040157600080fd5b506103b36104103660046125ec565b610b61565b34801561042157600080fd5b5061035561043036600461265e565b610c77565b34801561044157600080fd5b506102d0610c92565b34801561045657600080fd5b506102d061046536600461258f565b610e81565b34801561047657600080fd5b506103b361048536600461258f565b610e8c565b34801561049657600080fd5b506104a06115e081565b6040516102dd91906126b8565b3480156104b957600080fd5b506103286104c836600461258f565b610f50565b3480156104d957600080fd5b506103b36104e8366004612629565b610f62565b3480156104f957600080fd5b50610355610fca565b34801561050e57600080fd5b506007546001600160a01b0316610328565b34801561052c57600080fd5b506102fb611000565b34801561054157600080fd5b5061055561055036600461258f565b61100f565b6040516102dd94939291906126cf565b34801561057157600080fd5b5061057a606481565b6040516102dd919061270d565b34801561059357600080fd5b506103b366c6f3b40b6c000081565b3480156105ae57600080fd5b506103556105bd36600461272e565b61104f565b3480156105ce57600080fd5b506103b360bb5481565b3480156105e457600080fd5b506102d06105f336600461258f565b61111f565b34801561060457600080fd5b5061035561114a565b34801561061957600080fd5b5060095461062d906001600160a01b031681565b6040516102dd91906127a3565b34801561064657600080fd5b506103556106553660046128ac565b6111f1565b34801561066657600080fd5b5060be54610328906001600160a01b031681565b34801561068657600080fd5b5061057a603881565b34801561069b57600080fd5b506102fb6106aa36600461258f565b61122b565b3480156106bb57600080fd5b506103b360bd5481565b3480156106d157600080fd5b506103556106e036600461297d565b611325565b3480156106f157600080fd5b5061074f610700366004612629565b60bc602052600090815260409020546001600160801b03811690700100000000000000000000000000000000810461ffff16907201000000000000000000000000000000000000900460ff1683565b6040516102dd93929190612a39565b34801561076a57600080fd5b506102fb610779366004612a75565b611467565b34801561078a57600080fd5b506102d0610799366004612aa8565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b6103556107d536600461297d565b61152c565b3480156107e657600080fd5b506103556107f5366004612629565b611659565b34801561080657600080fd5b506102d0610815366004612adb565b6116b5565b60006001600160e01b031982167f80ac58cd00000000000000000000000000000000000000000000000000000000148061087d57506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806108b157506001600160e01b031982167f780e9d6300000000000000000000000000000000000000000000000000000000145b806108e557507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b6060600180546108fa90612b39565b80601f016020809104026020016040519081016040528092919081815260200182805461092690612b39565b80156109735780601f1061094857610100808354040283529160200191610973565b820191906000526020600020905b81548152906001019060200180831161095657829003601f168201915b5050505050905090565b6000610988826119f5565b6109be576040517fcf4700e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b506000908152600560205260409020546001600160a01b031690565b60006109e582610f50565b9050806001600160a01b0316836001600160a01b03161415610a33576040517f943f7b8c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336001600160a01b03821614801590610a535750610a518133610799565b155b15610a8a576040517fcfb3b94200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a95838383611a29565b505050565b6007546001600160a01b03163314610acd5760405162461bcd60e51b8152600401610ac490612b98565b60405180910390fd5b60be80546001600160a01b03831673ffffffffffffffffffffffffffffffffffffffff19918216811790925560bf8054909116821790556040517fa00632ff71f043bcebbaa26952d3fd31a42e459b0dc8b686a91eb77725ee668091610b32916125ca565b60405180910390a150565b600060bd5442118015610b51575060bd5415155b905090565b610a95838383611a92565b6000610b6c83610f62565b8210610ba4576040517f0ddac30e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080546001600160801b03169080805b83811015610c7157600081815260036020908152604091829020825160608101845290546001600160a01b0381168252600160a01b810467ffffffffffffffff1692820192909252600160e01b90910460ff161580159282019290925290610c1d5750610c69565b80516001600160a01b031615610c3257805192505b876001600160a01b0316836001600160a01b03161415610c675786841415610c60575093506108e592505050565b6001909301925b505b600101610bb5565b50600080fd5b610a95838383604051806020016040528060008152506111f1565b600060026008541415610cb75760405162461bcd60e51b8152600401610ac490612bda565b600260085533600090815260bc602052604081205460ba546001600160801b038216916115e091610d0091700100000000000000000000000000000000900461ffff1690612c00565b610d0a9190612c35565b610d149190612c49565b905080610d4d576040517fd0d04f6000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610d5e6001600160801b0382612c64565b33600090815260bc602052604081208054909190610d869084906001600160801b0316612c78565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506000610db33390565b6001600160a01b03168260405160006040518083038185875af1925050503d8060008114610dfd576040519150601f19603f3d011682016040523d82523d6000602084013e610e02565b606091505b5050905080610e3d576040517f27fcd9d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f47521fa5fb7651fe9fbc44eddef019766bd46d393ffcd1c5e1338cce9bd35cf93383604051610e6e929190612cb0565b60405180910390a1915050600160085590565b60006108e5826119f5565b600080546001600160801b031681805b82811015610f1d57600081815260036020908152604091829020825160608101845290546001600160a01b0381168252600160a01b810467ffffffffffffffff1692820192909252600160e01b90910460ff16151591810182905290610f145785831415610f0d5750949350505050565b6001909201915b50600101610e9c565b506040517fa723001c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610f5b82611cfd565b5192915050565b60006001600160a01b038216610fa4576040517f8f4eb60400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b506001600160a01b031660009081526004602052604090205467ffffffffffffffff1690565b6007546001600160a01b03163314610ff45760405162461bcd60e51b8152600401610ac490612b98565b610ffe6000611e3a565b565b6060600280546108fa90612b39565b60b9818154811061101f57600080fd5b60009182526020909120015460ff8082169250610100820481169162010000810482169163010000009091041684565b6001600160a01b038216331415611092576040517fb06307db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360008181526006602090815260408083206001600160a01b03871680855292529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151517905590519091907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31906111139085906124fa565b60405180910390a35050565b600a816115e0811061113057600080fd5b60209182820401919006915054906101000a900460ff1681565b6007546001600160a01b031633146111745760405162461bcd60e51b8152600401610ac490612b98565b61117c610b3d565b156111b3576040517f63a2de0f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b4260bd8190556040517fe1edf9fc3dd1a3a3cb6d462dc065c574fb31cc577afdfba34c247d258db7f0b5916111e791612650565b60405180910390a1565b6111fc848484611a92565b61120884848484611e99565b611225576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b6060611236826119f5565b61126c576040517fa14c4b5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60be546001600160a01b031661129057505060408051602081019091526000815290565b60bf5460b980546001600160a01b039092169163f8df92499190859081106112ba576112ba612ccb565b906000526020600020016040518263ffffffff1660e01b81526004016112e09190612d77565b600060405180830381865afa1580156112fd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108e59190810190612ddd565b600260085414156113485760405162461bcd60e51b8152600401610ac490612bda565b6002600855848314611386576040517f9c38699e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33600090815260bc60205260409020547201000000000000000000000000000000000000900460ff168511156113e8576040517f74a5d1f500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6113f360ff86612c64565b33600090815260bc60205260409020805460129061142b9084907201000000000000000000000000000000000000900460ff16612e18565b92506101000a81548160ff021916908360ff16021790555061145a61144d3390565b8787878787876000611fcb565b5050600160085550505050565b606060005b60b9548110156114f9578360ff1660b9828154811061148d5761148d612ccb565b60009182526020909120015460ff161480156114d157508260ff1660b982815481106114bb576114bb612ccb565b600091825260209091200154610100900460ff16145b156114e7576114df8161122b565b9150506108e5565b806114f181612e25565b91505061146c565b506040517ff09c6c1300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611534610b3d565b61156a576040517f63a2de0f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600854141561158d5760405162461bcd60e51b8152600401610ac490612bda565b60026008558483146115cb576040517f9c38699e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6115dc8566c6f3b40b6c0000612c00565b3414611614576040517f99b5cb1d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611625338787878787876001611fcb565b6116368566c6f3b40b6c0000612c00565b60ba60008282546116479190612e40565b90915550506001600855505050505050565b6007546001600160a01b031633146116835760405162461bcd60e51b8152600401610ac490612b98565b6001600160a01b0381166116a95760405162461bcd60e51b8152600401610ac490612e53565b6116b281611e3a565b50565b6000600260085414156116da5760405162461bcd60e51b8152600401610ac490612bda565b60026008556000805b838110156118c65761170c85858381811061170057611700612ccb565b905060200201356119f5565b611742576040517f42d8848b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60095433906001600160a01b03166306daaebd60b988888681811061176957611769612ccb565b905060200201358154811061178057611780612ccb565b60009182526020909120015460405160e083901b6001600160e01b03191681526117b591610100900460ff1690600401612ecc565b602060405180830381865afa1580156117d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f69190612ee5565b6001600160a01b031614611809576118b4565b60b985858381811061181d5761181d612ccb565b905060200201358154811061183457611834612ccb565b6000918252602090912001546301000000900460ff1615611854576118b4565b8161185e81612e25565b925050600160b986868481811061187757611877612ccb565b905060200201358154811061188e5761188e612ccb565b6000918252602090912001805491151563010000000263ff000000199092169190911790555b806118be81612e25565b9150506116e3565b50806118fe576040517fd0d04f6000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60bb546115e09061191666c6f3b40b6c000084612c00565b6119209190612c00565b61192a9190612c35565b604051909150600090339083908381818185875af1925050503d806000811461196f576040519150601f19603f3d011682016040523d82523d6000602084013e611974565b606091505b50509050806119af576040517f27fcd9d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f481f0c31fede089900c9fd5b1bd26054cf3d6e31a09d068df5b323a0265211e533836040516119e0929190612cb0565b60405180910390a16001600855949350505050565b600080546001600160801b0316821080156108e5575050600090815260036020526040902054600160e01b900460ff161590565b600082815260056020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6000611a9d82611cfd565b80519091506000906001600160a01b0316336001600160a01b03161480611acb57508151611acb9033610799565b80611ae6575033611adb8461097d565b6001600160a01b0316145b905080611b1f576040517f59c896be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b846001600160a01b031682600001516001600160a01b031614611b6e576040517fa114810000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038416611bae576040517fea553b3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611bbe6000848460000151611a29565b6001600160a01b038581166000908152600460209081526040808320805467ffffffffffffffff1980821667ffffffffffffffff92831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652600390945282852080546001600160e01b031916909417600160a01b429092169190910217909255908601808352912054909116611cb3576000546001600160801b0316811015611cb3578251600082815260036020908152604090912080549186015167ffffffffffffffff16600160a01b026001600160e01b03199092166001600160a01b03909316929092171790555b5082846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b5050505050565b60408051606081018252600080825260208201819052918101829052905482906001600160801b0316811015611e0857600081815260036020908152604091829020825160608101845290546001600160a01b0381168252600160a01b810467ffffffffffffffff1692820192909252600160e01b90910460ff16151591810182905290611e065780516001600160a01b031615611d9c579392505050565b5060001901600081815260036020908152604091829020825160608101845290546001600160a01b038116808352600160a01b820467ffffffffffffffff1693830193909352600160e01b900460ff1615159281019290925215611e01579392505050565b611d9c565b505b6040517fdf2d9b4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600780546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006001600160a01b0384163b15611fbf576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a0290611ef6903390899088908890600401612f06565b6020604051808303816000875af1925050508015611f31575060408051601f3d908101601f19168201909252611f2e91810190612f55565b60015b611f8c573d808015611f5f576040519150601f19603f3d011682016040523d82523d6000602084013e611f64565b606091505b508051611f84576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b0319167f150b7a0200000000000000000000000000000000000000000000000000000000149050611fc3565b5060015b949350505050565b60005b86811015612286576000888883818110611fea57611fea612ccb565b905060200201359050600087878481811061200757612007612ccb565b60200291909101359150600a905081612021606485612c00565b61202b9190612e40565b6115e0811061203c5761203c612ccb565b602081049091015460ff601f9092166101000a90041615612089576040517f81d9ae2500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61209560016038612e18565b60ff168211156120d1576040517fd9c0f1d300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6120dd60016064612e18565b60ff16811115612119576040517f1f81f00900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604080516080810190915260b9908061213360ff86612c64565b60ff16815260200160ff80168461214a9190612c64565b60ff16815260200160ff801689898881811061216857612168612ccb565b905060200201356121799190612c64565b60ff90811682528715602092830152835460018181018655600095865294839020845191018054938501516040860151606090960151151563010000000263ff000000199685166201000002969096167fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000ffff918516610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00009096169390941692909217939093171617919091179055600a82612237606486612c00565b6122419190612e40565b6115e0811061225257612252612ccb565b602091828204019190066101000a81548160ff0219169083151502179055505050808061227e90612e25565b915050611fce565b50612291888761229b565b5050505050505050565b6122b58282604051806020016040528060008152506122b9565b5050565b610a9583838360016000546001600160801b03166001600160a01b03851661230d576040517f2e07630000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83612344576040517fb562e8dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038516600081815260046020908152604080832080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000811667ffffffffffffffff8083168c0181169182176801000000000000000067ffffffffffffffff1990941690921783900481168c018116909202179091558584526003909252822080546001600160e01b031916909317600160a01b42909216919091021790915581905b8581101561246f5760405182906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a483801561244557506124436000888488611e99565b155b15612463576040516368d2bf6b60e11b815260040160405180910390fd5b600191820191016123ee565b50600080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166001600160801b0392909216919091179055611cf6565b6001600160e01b031981165b81146116b257600080fd5b80356108e5816124ad565b6000602082840312156124e4576124e4600080fd5b6000611fc384846124c4565b8015155b82525050565b602081016108e582846124f0565b60005b8381101561252357818101518382015260200161250b565b838111156112255750506000910152565b600061253e825190565b808452602084019350612555818560208601612508565b601f01601f19169290920192915050565b602080825281016125778184612534565b9392505050565b806124b9565b80356108e58161257e565b6000602082840312156125a4576125a4600080fd5b6000611fc38484612584565b60006001600160a01b0382166108e5565b6124f4816125b0565b602081016108e582846125c1565b6124b9816125b0565b80356108e5816125d8565b6000806040838503121561260257612602600080fd5b600061260e85856125e1565b925050602061261f85828601612584565b9150509250929050565b60006020828403121561263e5761263e600080fd5b6000611fc384846125e1565b806124f4565b602081016108e5828461264a565b60008060006060848603121561267657612676600080fd5b600061268286866125e1565b9350506020612693868287016125e1565b92505060406126a486828701612584565b9150509250925092565b61ffff81166124f4565b602081016108e582846126ae565b60ff81166124f4565b608081016126dd82876126c6565b6126ea60208301866126c6565b6126f760408301856126c6565b61270460608301846124f0565b95945050505050565b602081016108e582846126c6565b8015156124b9565b80356108e58161271b565b6000806040838503121561274457612744600080fd5b600061275085856125e1565b925050602061261f85828601612723565b60006108e56001600160a01b038316612778565b90565b6001600160a01b031690565b60006108e582612761565b60006108e582612784565b6124f48161278f565b602081016108e5828461279a565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff821117156127ed576127ed6127b1565b6040525050565b60006127ff60405190565b905061280b82826127c7565b919050565b600067ffffffffffffffff82111561282a5761282a6127b1565b601f19601f83011660200192915050565b82818337506000910152565b600061285a61285584612810565b6127f4565b90508281526020810184848401111561287557612875600080fd5b61288084828561283b565b509392505050565b600082601f83011261289c5761289c600080fd5b8135611fc3848260208601612847565b600080600080608085870312156128c5576128c5600080fd5b60006128d187876125e1565b94505060206128e2878288016125e1565b93505060406128f387828801612584565b925050606085013567ffffffffffffffff81111561291357612913600080fd5b61291f87828801612888565b91505092959194509250565b60008083601f84011261294057612940600080fd5b50813567ffffffffffffffff81111561295b5761295b600080fd5b60208301915083602082028301111561297657612976600080fd5b9250929050565b6000806000806000806060878903121561299957612999600080fd5b863567ffffffffffffffff8111156129b3576129b3600080fd5b6129bf89828a0161292b565b9650965050602087013567ffffffffffffffff8111156129e1576129e1600080fd5b6129ed89828a0161292b565b9450945050604087013567ffffffffffffffff811115612a0f57612a0f600080fd5b612a1b89828a0161292b565b92509250509295509295509295565b6001600160801b0381166124f4565b60608101612a478286612a2a565b612a5460208301856126ae565b611fc360408301846126c6565b60ff81166124b9565b80356108e581612a61565b60008060408385031215612a8b57612a8b600080fd5b6000612a978585612a6a565b925050602061261f85828601612a6a565b60008060408385031215612abe57612abe600080fd5b6000612aca85856125e1565b925050602061261f858286016125e1565b60008060208385031215612af157612af1600080fd5b823567ffffffffffffffff811115612b0b57612b0b600080fd5b612b178582860161292b565b92509250509250929050565b634e487b7160e01b600052602260045260246000fd5b600281046001821680612b4d57607f821691505b60208210811415612b6057612b60612b23565b50919050565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081525b60200190565b602080825281016108e581612b66565b601f8152602081017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081529050612b92565b602080825281016108e581612ba8565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615612c1a57612c1a612bea565b500290565b634e487b7160e01b600052601260045260246000fd5b600082612c4457612c44612c1f565b500490565b815b9150600082821015612c5f57612c5f612bea565b500390565b600082612c7357612c73612c1f565b500690565b6001600160801b03811690506001600160801b03821691506000826001600160801b0303821115612cab57612cab612bea565b500190565b60408101612cbe82856125c1565b612577602083018461264a565b634e487b7160e01b600052603260045260246000fd5b60006108e5825b60ff1690565b60006108e5612ce88360081c90565b60006108e5612ce88360101c90565b60006108e5612ce88360181c90565b8054612d2681612ce1565b612d3084826126c6565b50612d3a81612cee565b612d4760208501826126c6565b50612d5181612cfd565b612d5e60408501826126c6565b50612d6881612d0c565b9050610a9560608401826124f0565b608081016108e58284612d1b565b6000612d9361285584612810565b905082815260208101848484011115612dae57612dae600080fd5b612880848285612508565b600082601f830112612dcd57612dcd600080fd5b8151611fc3848260208601612d85565b600060208284031215612df257612df2600080fd5b815167ffffffffffffffff811115612e0c57612e0c600080fd5b611fc384828501612db9565b60ff908116908216612c4b565b6000600019821415612e3957612e39612bea565b5060010190565b60008219821115612cab57612cab612bea565b602080825281016108e581602681527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160208201527f6464726573730000000000000000000000000000000000000000000000000000604082015260600190565b60006108e561277560ff841681565b6124f481612eb4565b602081016108e58284612ec3565b80516108e5816125d8565b600060208284031215612efa57612efa600080fd5b6000611fc38484612eda565b60808101612f1482876125c1565b612f2160208301866125c1565b612f2e604083018561264a565b8181036060830152612f408184612534565b9695505050505050565b80516108e5816124ad565b600060208284031215612f6a57612f6a600080fd5b6000611fc38484612f4a56fea26469706673582212200af087089218e1b35e4ab4ebf72376a500ab156a35c616d4fc371562af277c4e64736f6c634300080c0033",
  "deployedBytecode": "0x6080604052600436106102a45760003560e01c806398f539591161016e578063c0c9c735116100cb578063e632751a1161007f578063f140a90011610064578063f140a900146107c7578063f2fde38b146107da578063fca517a7146107fa57600080fd5b8063e632751a1461075e578063e985e9c51461077e57600080fd5b8063d7822c99116100b0578063d7822c99146106af578063dd6c6cef146106c5578063de6746a5146106e557600080fd5b8063c0c9c7351461067a578063c87b56dd1461068f57600080fd5b8063af00972511610122578063b6cfb24211610107578063b6cfb2421461060d578063b88d4fde1461063a578063c074f4121461065a57600080fd5b8063af009725146105d8578063b585209b146105f857600080fd5b80639c51792a116101535780639c51792a14610587578063a22cb465146105a2578063ac156e9b146105c257600080fd5b806398f539591461053557806399c0731b1461056557600080fd5b806342842e0e1161021c5780636352211e116101d0578063715018a6116101b5578063715018a6146104ed5780638da5cb5b1461050257806395d89b411461052057600080fd5b80636352211e146104ad57806370a08231146104cd57600080fd5b80634f558e79116102015780634f558e791461044a5780634f6ccce71461046a57806353557e251461048a57600080fd5b806342842e0e146104155780634bd3f52f1461043557600080fd5b806312b40a9f116102735780631a6949e3116102585780631a6949e3146103c057806323b872dd146103d55780632f745c59146103f557600080fd5b806312b40a9f1461035757806318160ddd1461037757600080fd5b806301ffc9a7146102b057806306fdde03146102e6578063081812fc14610308578063095ea7b31461033557600080fd5b366102ab57005b600080fd5b3480156102bc57600080fd5b506102d06102cb3660046124cf565b61081a565b6040516102dd91906124fa565b60405180910390f35b3480156102f257600080fd5b506102fb6108eb565b6040516102dd9190612566565b34801561031457600080fd5b5061032861032336600461258f565b61097d565b6040516102dd91906125ca565b34801561034157600080fd5b506103556103503660046125ec565b6109da565b005b34801561036357600080fd5b50610355610372366004612629565b610a9a565b34801561038357600080fd5b506103b36000546001600160801b0370010000000000000000000000000000000082048116918116919091031690565b6040516102dd9190612650565b3480156103cc57600080fd5b506102d0610b3d565b3480156103e157600080fd5b506103556103f036600461265e565b610b56565b34801561040157600080fd5b506103b36104103660046125ec565b610b61565b34801561042157600080fd5b5061035561043036600461265e565b610c77565b34801561044157600080fd5b506102d0610c92565b34801561045657600080fd5b506102d061046536600461258f565b610e81565b34801561047657600080fd5b506103b361048536600461258f565b610e8c565b34801561049657600080fd5b506104a06115e081565b6040516102dd91906126b8565b3480156104b957600080fd5b506103286104c836600461258f565b610f50565b3480156104d957600080fd5b506103b36104e8366004612629565b610f62565b3480156104f957600080fd5b50610355610fca565b34801561050e57600080fd5b506007546001600160a01b0316610328565b34801561052c57600080fd5b506102fb611000565b34801561054157600080fd5b5061055561055036600461258f565b61100f565b6040516102dd94939291906126cf565b34801561057157600080fd5b5061057a606481565b6040516102dd919061270d565b34801561059357600080fd5b506103b366c6f3b40b6c000081565b3480156105ae57600080fd5b506103556105bd36600461272e565b61104f565b3480156105ce57600080fd5b506103b360bb5481565b3480156105e457600080fd5b506102d06105f336600461258f565b61111f565b34801561060457600080fd5b5061035561114a565b34801561061957600080fd5b5060095461062d906001600160a01b031681565b6040516102dd91906127a3565b34801561064657600080fd5b506103556106553660046128ac565b6111f1565b34801561066657600080fd5b5060be54610328906001600160a01b031681565b34801561068657600080fd5b5061057a603881565b34801561069b57600080fd5b506102fb6106aa36600461258f565b61122b565b3480156106bb57600080fd5b506103b360bd5481565b3480156106d157600080fd5b506103556106e036600461297d565b611325565b3480156106f157600080fd5b5061074f610700366004612629565b60bc602052600090815260409020546001600160801b03811690700100000000000000000000000000000000810461ffff16907201000000000000000000000000000000000000900460ff1683565b6040516102dd93929190612a39565b34801561076a57600080fd5b506102fb610779366004612a75565b611467565b34801561078a57600080fd5b506102d0610799366004612aa8565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b6103556107d536600461297d565b61152c565b3480156107e657600080fd5b506103556107f5366004612629565b611659565b34801561080657600080fd5b506102d0610815366004612adb565b6116b5565b60006001600160e01b031982167f80ac58cd00000000000000000000000000000000000000000000000000000000148061087d57506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806108b157506001600160e01b031982167f780e9d6300000000000000000000000000000000000000000000000000000000145b806108e557507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b6060600180546108fa90612b39565b80601f016020809104026020016040519081016040528092919081815260200182805461092690612b39565b80156109735780601f1061094857610100808354040283529160200191610973565b820191906000526020600020905b81548152906001019060200180831161095657829003601f168201915b5050505050905090565b6000610988826119f5565b6109be576040517fcf4700e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b506000908152600560205260409020546001600160a01b031690565b60006109e582610f50565b9050806001600160a01b0316836001600160a01b03161415610a33576040517f943f7b8c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336001600160a01b03821614801590610a535750610a518133610799565b155b15610a8a576040517fcfb3b94200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a95838383611a29565b505050565b6007546001600160a01b03163314610acd5760405162461bcd60e51b8152600401610ac490612b98565b60405180910390fd5b60be80546001600160a01b03831673ffffffffffffffffffffffffffffffffffffffff19918216811790925560bf8054909116821790556040517fa00632ff71f043bcebbaa26952d3fd31a42e459b0dc8b686a91eb77725ee668091610b32916125ca565b60405180910390a150565b600060bd5442118015610b51575060bd5415155b905090565b610a95838383611a92565b6000610b6c83610f62565b8210610ba4576040517f0ddac30e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080546001600160801b03169080805b83811015610c7157600081815260036020908152604091829020825160608101845290546001600160a01b0381168252600160a01b810467ffffffffffffffff1692820192909252600160e01b90910460ff161580159282019290925290610c1d5750610c69565b80516001600160a01b031615610c3257805192505b876001600160a01b0316836001600160a01b03161415610c675786841415610c60575093506108e592505050565b6001909301925b505b600101610bb5565b50600080fd5b610a95838383604051806020016040528060008152506111f1565b600060026008541415610cb75760405162461bcd60e51b8152600401610ac490612bda565b600260085533600090815260bc602052604081205460ba546001600160801b038216916115e091610d0091700100000000000000000000000000000000900461ffff1690612c00565b610d0a9190612c35565b610d149190612c49565b905080610d4d576040517fd0d04f6000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610d5e6001600160801b0382612c64565b33600090815260bc602052604081208054909190610d869084906001600160801b0316612c78565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506000610db33390565b6001600160a01b03168260405160006040518083038185875af1925050503d8060008114610dfd576040519150601f19603f3d011682016040523d82523d6000602084013e610e02565b606091505b5050905080610e3d576040517f27fcd9d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f47521fa5fb7651fe9fbc44eddef019766bd46d393ffcd1c5e1338cce9bd35cf93383604051610e6e929190612cb0565b60405180910390a1915050600160085590565b60006108e5826119f5565b600080546001600160801b031681805b82811015610f1d57600081815260036020908152604091829020825160608101845290546001600160a01b0381168252600160a01b810467ffffffffffffffff1692820192909252600160e01b90910460ff16151591810182905290610f145785831415610f0d5750949350505050565b6001909201915b50600101610e9c565b506040517fa723001c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610f5b82611cfd565b5192915050565b60006001600160a01b038216610fa4576040517f8f4eb60400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b506001600160a01b031660009081526004602052604090205467ffffffffffffffff1690565b6007546001600160a01b03163314610ff45760405162461bcd60e51b8152600401610ac490612b98565b610ffe6000611e3a565b565b6060600280546108fa90612b39565b60b9818154811061101f57600080fd5b60009182526020909120015460ff8082169250610100820481169162010000810482169163010000009091041684565b6001600160a01b038216331415611092576040517fb06307db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360008181526006602090815260408083206001600160a01b03871680855292529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151517905590519091907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31906111139085906124fa565b60405180910390a35050565b600a816115e0811061113057600080fd5b60209182820401919006915054906101000a900460ff1681565b6007546001600160a01b031633146111745760405162461bcd60e51b8152600401610ac490612b98565b61117c610b3d565b156111b3576040517f63a2de0f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b4260bd8190556040517fe1edf9fc3dd1a3a3cb6d462dc065c574fb31cc577afdfba34c247d258db7f0b5916111e791612650565b60405180910390a1565b6111fc848484611a92565b61120884848484611e99565b611225576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b6060611236826119f5565b61126c576040517fa14c4b5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60be546001600160a01b031661129057505060408051602081019091526000815290565b60bf5460b980546001600160a01b039092169163f8df92499190859081106112ba576112ba612ccb565b906000526020600020016040518263ffffffff1660e01b81526004016112e09190612d77565b600060405180830381865afa1580156112fd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108e59190810190612ddd565b600260085414156113485760405162461bcd60e51b8152600401610ac490612bda565b6002600855848314611386576040517f9c38699e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33600090815260bc60205260409020547201000000000000000000000000000000000000900460ff168511156113e8576040517f74a5d1f500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6113f360ff86612c64565b33600090815260bc60205260409020805460129061142b9084907201000000000000000000000000000000000000900460ff16612e18565b92506101000a81548160ff021916908360ff16021790555061145a61144d3390565b8787878787876000611fcb565b5050600160085550505050565b606060005b60b9548110156114f9578360ff1660b9828154811061148d5761148d612ccb565b60009182526020909120015460ff161480156114d157508260ff1660b982815481106114bb576114bb612ccb565b600091825260209091200154610100900460ff16145b156114e7576114df8161122b565b9150506108e5565b806114f181612e25565b91505061146c565b506040517ff09c6c1300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611534610b3d565b61156a576040517f63a2de0f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600854141561158d5760405162461bcd60e51b8152600401610ac490612bda565b60026008558483146115cb576040517f9c38699e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6115dc8566c6f3b40b6c0000612c00565b3414611614576040517f99b5cb1d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611625338787878787876001611fcb565b6116368566c6f3b40b6c0000612c00565b60ba60008282546116479190612e40565b90915550506001600855505050505050565b6007546001600160a01b031633146116835760405162461bcd60e51b8152600401610ac490612b98565b6001600160a01b0381166116a95760405162461bcd60e51b8152600401610ac490612e53565b6116b281611e3a565b50565b6000600260085414156116da5760405162461bcd60e51b8152600401610ac490612bda565b60026008556000805b838110156118c65761170c85858381811061170057611700612ccb565b905060200201356119f5565b611742576040517f42d8848b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60095433906001600160a01b03166306daaebd60b988888681811061176957611769612ccb565b905060200201358154811061178057611780612ccb565b60009182526020909120015460405160e083901b6001600160e01b03191681526117b591610100900460ff1690600401612ecc565b602060405180830381865afa1580156117d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f69190612ee5565b6001600160a01b031614611809576118b4565b60b985858381811061181d5761181d612ccb565b905060200201358154811061183457611834612ccb565b6000918252602090912001546301000000900460ff1615611854576118b4565b8161185e81612e25565b925050600160b986868481811061187757611877612ccb565b905060200201358154811061188e5761188e612ccb565b6000918252602090912001805491151563010000000263ff000000199092169190911790555b806118be81612e25565b9150506116e3565b50806118fe576040517fd0d04f6000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60bb546115e09061191666c6f3b40b6c000084612c00565b6119209190612c00565b61192a9190612c35565b604051909150600090339083908381818185875af1925050503d806000811461196f576040519150601f19603f3d011682016040523d82523d6000602084013e611974565b606091505b50509050806119af576040517f27fcd9d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f481f0c31fede089900c9fd5b1bd26054cf3d6e31a09d068df5b323a0265211e533836040516119e0929190612cb0565b60405180910390a16001600855949350505050565b600080546001600160801b0316821080156108e5575050600090815260036020526040902054600160e01b900460ff161590565b600082815260056020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6000611a9d82611cfd565b80519091506000906001600160a01b0316336001600160a01b03161480611acb57508151611acb9033610799565b80611ae6575033611adb8461097d565b6001600160a01b0316145b905080611b1f576040517f59c896be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b846001600160a01b031682600001516001600160a01b031614611b6e576040517fa114810000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038416611bae576040517fea553b3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611bbe6000848460000151611a29565b6001600160a01b038581166000908152600460209081526040808320805467ffffffffffffffff1980821667ffffffffffffffff92831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652600390945282852080546001600160e01b031916909417600160a01b429092169190910217909255908601808352912054909116611cb3576000546001600160801b0316811015611cb3578251600082815260036020908152604090912080549186015167ffffffffffffffff16600160a01b026001600160e01b03199092166001600160a01b03909316929092171790555b5082846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b5050505050565b60408051606081018252600080825260208201819052918101829052905482906001600160801b0316811015611e0857600081815260036020908152604091829020825160608101845290546001600160a01b0381168252600160a01b810467ffffffffffffffff1692820192909252600160e01b90910460ff16151591810182905290611e065780516001600160a01b031615611d9c579392505050565b5060001901600081815260036020908152604091829020825160608101845290546001600160a01b038116808352600160a01b820467ffffffffffffffff1693830193909352600160e01b900460ff1615159281019290925215611e01579392505050565b611d9c565b505b6040517fdf2d9b4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600780546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006001600160a01b0384163b15611fbf576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a0290611ef6903390899088908890600401612f06565b6020604051808303816000875af1925050508015611f31575060408051601f3d908101601f19168201909252611f2e91810190612f55565b60015b611f8c573d808015611f5f576040519150601f19603f3d011682016040523d82523d6000602084013e611f64565b606091505b508051611f84576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b0319167f150b7a0200000000000000000000000000000000000000000000000000000000149050611fc3565b5060015b949350505050565b60005b86811015612286576000888883818110611fea57611fea612ccb565b905060200201359050600087878481811061200757612007612ccb565b60200291909101359150600a905081612021606485612c00565b61202b9190612e40565b6115e0811061203c5761203c612ccb565b602081049091015460ff601f9092166101000a90041615612089576040517f81d9ae2500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61209560016038612e18565b60ff168211156120d1576040517fd9c0f1d300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6120dd60016064612e18565b60ff16811115612119576040517f1f81f00900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604080516080810190915260b9908061213360ff86612c64565b60ff16815260200160ff80168461214a9190612c64565b60ff16815260200160ff801689898881811061216857612168612ccb565b905060200201356121799190612c64565b60ff90811682528715602092830152835460018181018655600095865294839020845191018054938501516040860151606090960151151563010000000263ff000000199685166201000002969096167fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000ffff918516610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00009096169390941692909217939093171617919091179055600a82612237606486612c00565b6122419190612e40565b6115e0811061225257612252612ccb565b602091828204019190066101000a81548160ff0219169083151502179055505050808061227e90612e25565b915050611fce565b50612291888761229b565b5050505050505050565b6122b58282604051806020016040528060008152506122b9565b5050565b610a9583838360016000546001600160801b03166001600160a01b03851661230d576040517f2e07630000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83612344576040517fb562e8dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038516600081815260046020908152604080832080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000811667ffffffffffffffff8083168c0181169182176801000000000000000067ffffffffffffffff1990941690921783900481168c018116909202179091558584526003909252822080546001600160e01b031916909317600160a01b42909216919091021790915581905b8581101561246f5760405182906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a483801561244557506124436000888488611e99565b155b15612463576040516368d2bf6b60e11b815260040160405180910390fd5b600191820191016123ee565b50600080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166001600160801b0392909216919091179055611cf6565b6001600160e01b031981165b81146116b257600080fd5b80356108e5816124ad565b6000602082840312156124e4576124e4600080fd5b6000611fc384846124c4565b8015155b82525050565b602081016108e582846124f0565b60005b8381101561252357818101518382015260200161250b565b838111156112255750506000910152565b600061253e825190565b808452602084019350612555818560208601612508565b601f01601f19169290920192915050565b602080825281016125778184612534565b9392505050565b806124b9565b80356108e58161257e565b6000602082840312156125a4576125a4600080fd5b6000611fc38484612584565b60006001600160a01b0382166108e5565b6124f4816125b0565b602081016108e582846125c1565b6124b9816125b0565b80356108e5816125d8565b6000806040838503121561260257612602600080fd5b600061260e85856125e1565b925050602061261f85828601612584565b9150509250929050565b60006020828403121561263e5761263e600080fd5b6000611fc384846125e1565b806124f4565b602081016108e5828461264a565b60008060006060848603121561267657612676600080fd5b600061268286866125e1565b9350506020612693868287016125e1565b92505060406126a486828701612584565b9150509250925092565b61ffff81166124f4565b602081016108e582846126ae565b60ff81166124f4565b608081016126dd82876126c6565b6126ea60208301866126c6565b6126f760408301856126c6565b61270460608301846124f0565b95945050505050565b602081016108e582846126c6565b8015156124b9565b80356108e58161271b565b6000806040838503121561274457612744600080fd5b600061275085856125e1565b925050602061261f85828601612723565b60006108e56001600160a01b038316612778565b90565b6001600160a01b031690565b60006108e582612761565b60006108e582612784565b6124f48161278f565b602081016108e5828461279a565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff821117156127ed576127ed6127b1565b6040525050565b60006127ff60405190565b905061280b82826127c7565b919050565b600067ffffffffffffffff82111561282a5761282a6127b1565b601f19601f83011660200192915050565b82818337506000910152565b600061285a61285584612810565b6127f4565b90508281526020810184848401111561287557612875600080fd5b61288084828561283b565b509392505050565b600082601f83011261289c5761289c600080fd5b8135611fc3848260208601612847565b600080600080608085870312156128c5576128c5600080fd5b60006128d187876125e1565b94505060206128e2878288016125e1565b93505060406128f387828801612584565b925050606085013567ffffffffffffffff81111561291357612913600080fd5b61291f87828801612888565b91505092959194509250565b60008083601f84011261294057612940600080fd5b50813567ffffffffffffffff81111561295b5761295b600080fd5b60208301915083602082028301111561297657612976600080fd5b9250929050565b6000806000806000806060878903121561299957612999600080fd5b863567ffffffffffffffff8111156129b3576129b3600080fd5b6129bf89828a0161292b565b9650965050602087013567ffffffffffffffff8111156129e1576129e1600080fd5b6129ed89828a0161292b565b9450945050604087013567ffffffffffffffff811115612a0f57612a0f600080fd5b612a1b89828a0161292b565b92509250509295509295509295565b6001600160801b0381166124f4565b60608101612a478286612a2a565b612a5460208301856126ae565b611fc360408301846126c6565b60ff81166124b9565b80356108e581612a61565b60008060408385031215612a8b57612a8b600080fd5b6000612a978585612a6a565b925050602061261f85828601612a6a565b60008060408385031215612abe57612abe600080fd5b6000612aca85856125e1565b925050602061261f858286016125e1565b60008060208385031215612af157612af1600080fd5b823567ffffffffffffffff811115612b0b57612b0b600080fd5b612b178582860161292b565b92509250509250929050565b634e487b7160e01b600052602260045260246000fd5b600281046001821680612b4d57607f821691505b60208210811415612b6057612b60612b23565b50919050565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081525b60200190565b602080825281016108e581612b66565b601f8152602081017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081529050612b92565b602080825281016108e581612ba8565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615612c1a57612c1a612bea565b500290565b634e487b7160e01b600052601260045260246000fd5b600082612c4457612c44612c1f565b500490565b815b9150600082821015612c5f57612c5f612bea565b500390565b600082612c7357612c73612c1f565b500690565b6001600160801b03811690506001600160801b03821691506000826001600160801b0303821115612cab57612cab612bea565b500190565b60408101612cbe82856125c1565b612577602083018461264a565b634e487b7160e01b600052603260045260246000fd5b60006108e5825b60ff1690565b60006108e5612ce88360081c90565b60006108e5612ce88360101c90565b60006108e5612ce88360181c90565b8054612d2681612ce1565b612d3084826126c6565b50612d3a81612cee565b612d4760208501826126c6565b50612d5181612cfd565b612d5e60408501826126c6565b50612d6881612d0c565b9050610a9560608401826124f0565b608081016108e58284612d1b565b6000612d9361285584612810565b905082815260208101848484011115612dae57612dae600080fd5b612880848285612508565b600082601f830112612dcd57612dcd600080fd5b8151611fc3848260208601612d85565b600060208284031215612df257612df2600080fd5b815167ffffffffffffffff811115612e0c57612e0c600080fd5b611fc384828501612db9565b60ff908116908216612c4b565b6000600019821415612e3957612e39612bea565b5060010190565b60008219821115612cab57612cab612bea565b602080825281016108e581602681527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160208201527f6464726573730000000000000000000000000000000000000000000000000000604082015260600190565b60006108e561277560ff841681565b6124f481612eb4565b602081016108e58284612ec3565b80516108e5816125d8565b600060208284031215612efa57612efa600080fd5b6000611fc38484612eda565b60808101612f1482876125c1565b612f2160208301866125c1565b612f2e604083018561264a565b8181036060830152612f408184612534565b9695505050505050565b80516108e5816124ad565b600060208284031215612f6a57612f6a600080fd5b6000611fc38484612f4a56fea26469706673582212200af087089218e1b35e4ab4ebf72376a500ab156a35c616d4fc371562af277c4e64736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}. This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first. It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}. This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first. It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3248,
        "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
        "label": "_currentIndex",
        "offset": 0,
        "slot": "0",
        "type": "t_uint128"
      },
      {
        "astId": 3250,
        "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
        "label": "_burnCounter",
        "offset": 16,
        "slot": "0",
        "type": "t_uint128"
      },
      {
        "astId": 3252,
        "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
        "label": "_name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 3254,
        "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
        "label": "_symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 3259,
        "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
        "label": "_ownerships",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(TokenOwnership)3239_storage)"
      },
      {
        "astId": 3264,
        "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
        "label": "_addressData",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(AddressData)3246_storage)"
      },
      {
        "astId": 3268,
        "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3274,
        "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 225,
        "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
        "label": "_owner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 333,
        "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
        "label": "_status",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1258,
        "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
        "label": "blitmap",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IBlitmap)2876"
      },
      {
        "astId": 1262,
        "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
        "label": "blitoadzExist",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_bool)5600_storage"
      },
      {
        "astId": 1266,
        "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
        "label": "blitoadz",
        "offset": 0,
        "slot": "185",
        "type": "t_array(t_struct(Blitoadz)2851_storage)dyn_storage"
      },
      {
        "astId": 1268,
        "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
        "label": "receivedAmount",
        "offset": 0,
        "slot": "186",
        "type": "t_uint256"
      },
      {
        "astId": 1270,
        "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
        "label": "blitmapCreatorShares",
        "offset": 0,
        "slot": "187",
        "type": "t_uint256"
      },
      {
        "astId": 1275,
        "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
        "label": "founders",
        "offset": 0,
        "slot": "188",
        "type": "t_mapping(t_address,t_struct(Founder)1282_storage)"
      },
      {
        "astId": 1304,
        "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
        "label": "publicSaleStartTimestamp",
        "offset": 0,
        "slot": "189",
        "type": "t_uint256"
      },
      {
        "astId": 1359,
        "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
        "label": "renderingContractAddress",
        "offset": 0,
        "slot": "190",
        "type": "t_address"
      },
      {
        "astId": 1362,
        "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
        "label": "renderer",
        "offset": 0,
        "slot": "191",
        "type": "t_contract(IBlitoadzRenderer)2888"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bool)5600_storage": {
        "base": "t_bool",
        "encoding": "inplace",
        "label": "bool[5600]",
        "numberOfBytes": "5600"
      },
      "t_array(t_struct(Blitoadz)2851_storage)dyn_storage": {
        "base": "t_struct(Blitoadz)2851_storage",
        "encoding": "dynamic_array",
        "label": "struct BlitoadzTypes.Blitoadz[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBlitmap)2876": {
        "encoding": "inplace",
        "label": "contract IBlitmap",
        "numberOfBytes": "20"
      },
      "t_contract(IBlitoadzRenderer)2888": {
        "encoding": "inplace",
        "label": "contract IBlitoadzRenderer",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(AddressData)3246_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ERC721A.AddressData)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressData)3246_storage"
      },
      "t_mapping(t_address,t_struct(Founder)1282_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Blitoadz.Founder)",
        "numberOfBytes": "32",
        "value": "t_struct(Founder)1282_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(TokenOwnership)3239_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC721A.TokenOwnership)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenOwnership)3239_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressData)3246_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.AddressData",
        "members": [
          {
            "astId": 3241,
            "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 3243,
            "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
            "label": "numberMinted",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 3245,
            "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
            "label": "numberBurned",
            "offset": 16,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Blitoadz)2851_storage": {
        "encoding": "inplace",
        "label": "struct BlitoadzTypes.Blitoadz",
        "members": [
          {
            "astId": 2844,
            "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
            "label": "toadzId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2846,
            "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
            "label": "blitmapId",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2848,
            "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
            "label": "paletteOrder",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2850,
            "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
            "label": "withdrawn",
            "offset": 3,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Founder)1282_storage": {
        "encoding": "inplace",
        "label": "struct Blitoadz.Founder",
        "members": [
          {
            "astId": 1277,
            "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
            "label": "withdrawnAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 1279,
            "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
            "label": "shares",
            "offset": 16,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 1281,
            "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
            "label": "remainingAllocation",
            "offset": 18,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TokenOwnership)3239_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.TokenOwnership",
        "members": [
          {
            "astId": 3234,
            "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3236,
            "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
            "label": "startTimestamp",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 3238,
            "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
            "label": "burned",
            "offset": 28,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}