{
  "address": "0x9C6B3486EeFBA5F0a27442238123CC5dFBfD5B2C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_blitmap",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_end",
          "type": "uint256"
        }
      ],
      "name": "InvalidCodeAtRange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WriteError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BITS_PER_FILL_INDEX",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RECT_TAG_END",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RECT_TAG_START",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SVG_TAG_END",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SVG_TAG_START",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WH_FILL_TAG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Y_TAG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "toadzId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blitmapId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "paletteOrder",
          "type": "uint8"
        }
      ],
      "name": "getBlitoadz",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "palette",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getFill",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "toadzId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blitmapId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "paletteOrder",
          "type": "uint8"
        }
      ],
      "name": "getImageURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getToadzBytes",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getToadzName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_toadz",
          "type": "bytes"
        }
      ],
      "name": "setToadz",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_toadzNames",
          "type": "bytes"
        }
      ],
      "name": "setToadzNames",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toadz",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toadzNames",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "toadzId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blitmapId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "paletteOrder",
          "type": "uint8"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd849b230c0fd1076e4cb7205c03963a6006160ca8fc147355a8acb8ca9700303",
  "receipt": {
    "to": null,
    "from": "0x6966Bdb480e7f7A48A7f6B198eE8b9462A265401",
    "contractAddress": "0x9C6B3486EeFBA5F0a27442238123CC5dFBfD5B2C",
    "transactionIndex": 126,
    "gasUsed": "1970565",
    "logsBloom": "0x
    "blockHash": "0xa517e067fb3001ff76a6b9f73b88a29da8b8116f2b627a3ed131ccff3fe986e1",
    "transactionHash": "0xd849b230c0fd1076e4cb7205c03963a6006160ca8fc147355a8acb8ca9700303",
    "logs": [
      {
        "transactionIndex": 126,
        "blockNumber": 14499398,
        "transactionHash": "0xd849b230c0fd1076e4cb7205c03963a6006160ca8fc147355a8acb8ca9700303",
        "address": "0x9C6B3486EeFBA5F0a27442238123CC5dFBfD5B2C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006966bdb480e7f7a48a7f6b198ee8b9462a265401"
        ],
        "data": "0x",
        "logIndex": 174,
        "blockHash": "0xa517e067fb3001ff76a6b9f73b88a29da8b8116f2b627a3ed131ccff3fe986e1"
      }
    ],
    "blockNumber": 14499398,
    "cumulativeGasUsed": "10692839",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8d04a8c79cEB0889Bdd12acdF3Fa9D207eD3Ff63"
  ],
  "numDeployments": 1,
  "solcInputHash": "ab7f691cb6c87ded4dc4cbf94247b36a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_blitmap\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"InvalidCodeAtRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WriteError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BITS_PER_FILL_INDEX\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RECT_TAG_END\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RECT_TAG_START\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SVG_TAG_END\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SVG_TAG_START\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WH_FILL_TAG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Y_TAG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toadzId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blitmapId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"paletteOrder\",\"type\":\"uint8\"}],\"name\":\"getBlitoadz\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"palette\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getFill\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toadzId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blitmapId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"paletteOrder\",\"type\":\"uint8\"}],\"name\":\"getImageURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getToadzBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getToadzName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_toadz\",\"type\":\"bytes\"}],\"name\":\"setToadz\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_toadzNames\",\"type\":\"bytes\"}],\"name\":\"setToadzNames\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toadz\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toadzNames\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toadzId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blitmapId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"paletteOrder\",\"type\":\"uint8\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Indexes and images are concatenated and stored in a single 'bytes' with SSTORE2 to save gas.\"},\"getBlitoadz(uint256,uint256,uint8)\":{\"details\":\"Decode the rect and returns it as a plain string to be used in the svg rect attribute.\"},\"getFill(bytes,uint256)\":{\"details\":\"3 bytes per color because svg does not handle alpha.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/blitoadz/BlitoadzRenderer.sol\":\"BlitoadzRenderer\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":2000},\"remappings\":[]},\"sources\":{\"@0xsequence/sstore2/contracts/SSTORE2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./utils/Bytecode.sol\\\";\\n\\n/**\\n  @title A key-value storage with auto-generated keys for storing chunks of data with a lower write & read cost.\\n  @author Agustin Aguilar <aa@horizon.io>\\n\\n  Readme: https://github.com/0xsequence/sstore2#readme\\n*/\\nlibrary SSTORE2 {\\n  error WriteError();\\n\\n  /**\\n    @notice Stores `_data` and returns `pointer` as key for later retrieval\\n    @dev The pointer is a contract address with `_data` as code\\n    @param _data to be written\\n    @return pointer Pointer to the written `_data`\\n  */\\n  function write(bytes memory _data) internal returns (address pointer) {\\n    // Append 00 to _data so contract can't be called\\n    // Build init code\\n    bytes memory code = Bytecode.creationCodeFor(\\n      abi.encodePacked(\\n        hex'00',\\n        _data\\n      )\\n    );\\n\\n    // Deploy contract using create\\n    assembly { pointer := create(0, add(code, 32), mload(code)) }\\n\\n    // Address MUST be non-zero\\n    if (pointer == address(0)) revert WriteError();\\n  }\\n\\n  /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte \\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @return data read from `_pointer` contract\\n  */\\n  function read(address _pointer) internal view returns (bytes memory) {\\n    return Bytecode.codeAt(_pointer, 1, type(uint256).max);\\n  }\\n\\n  /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte \\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @param _start number of bytes to skip\\n    @return data read from `_pointer` contract\\n  */\\n  function read(address _pointer, uint256 _start) internal view returns (bytes memory) {\\n    return Bytecode.codeAt(_pointer, _start + 1, type(uint256).max);\\n  }\\n\\n  /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte \\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @param _start number of bytes to skip\\n    @param _end index before which to end extraction\\n    @return data read from `_pointer` contract\\n  */\\n  function read(address _pointer, uint256 _start, uint256 _end) internal view returns (bytes memory) {\\n    return Bytecode.codeAt(_pointer, _start + 1, _end + 1);\\n  }\\n}\\n\",\"keccak256\":\"0x79e6f5c7bb6b22d142ad0ec37e00930cdbef28ab405214f7c0f94cbd58255383\",\"license\":\"MIT\"},\"@0xsequence/sstore2/contracts/utils/Bytecode.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\nlibrary Bytecode {\\n  error InvalidCodeAtRange(uint256 _size, uint256 _start, uint256 _end);\\n\\n  /**\\n    @notice Generate a creation code that results on a contract with `_code` as bytecode\\n    @param _code The returning value of the resulting `creationCode`\\n    @return creationCode (constructor) for new contract\\n  */\\n  function creationCodeFor(bytes memory _code) internal pure returns (bytes memory) {\\n    /*\\n      0x00    0x63         0x63XXXXXX  PUSH4 _code.length  size\\n      0x01    0x80         0x80        DUP1                size size\\n      0x02    0x60         0x600e      PUSH1 14            14 size size\\n      0x03    0x60         0x6000      PUSH1 00            0 14 size size\\n      0x04    0x39         0x39        CODECOPY            size\\n      0x05    0x60         0x6000      PUSH1 00            0 size\\n      0x06    0xf3         0xf3        RETURN\\n      <CODE>\\n    */\\n\\n    return abi.encodePacked(\\n      hex\\\"63\\\",\\n      uint32(_code.length),\\n      hex\\\"80_60_0E_60_00_39_60_00_F3\\\",\\n      _code\\n    );\\n  }\\n\\n  /**\\n    @notice Returns the size of the code on a given address\\n    @param _addr Address that may or may not contain code\\n    @return size of the code on the given `_addr`\\n  */\\n  function codeSize(address _addr) internal view returns (uint256 size) {\\n    assembly { size := extcodesize(_addr) }\\n  }\\n\\n  /**\\n    @notice Returns the code of a given address\\n    @dev It will fail if `_end < _start`\\n    @param _addr Address that may or may not contain code\\n    @param _start number of bytes of code to skip on read\\n    @param _end index before which to end extraction\\n    @return oCode read from `_addr` deployed bytecode\\n\\n    Forked from: https://gist.github.com/KardanovIR/fe98661df9338c842b4a30306d507fbd\\n  */\\n  function codeAt(address _addr, uint256 _start, uint256 _end) internal view returns (bytes memory oCode) {\\n    uint256 csize = codeSize(_addr);\\n    if (csize == 0) return bytes(\\\"\\\");\\n\\n    if (_start > csize) return bytes(\\\"\\\");\\n    if (_end < _start) revert InvalidCodeAtRange(csize, _start, _end); \\n\\n    unchecked {\\n      uint256 reqSize = _end - _start;\\n      uint256 maxSize = csize - _start;\\n\\n      uint256 size = maxSize < reqSize ? maxSize : reqSize;\\n\\n      assembly {\\n        // allocate output byte array - this could also be done without assembly\\n        // by using o_code = new bytes(size)\\n        oCode := mload(0x40)\\n        // new \\\"memory end\\\" including padding\\n        mstore(0x40, add(oCode, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n        // store length in memory\\n        mstore(oCode, size)\\n        // actually retrieve the code, this needs assembly\\n        extcodecopy(_addr, add(oCode, 0x20), _start, size)\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x40ef4ee5697507566574eda36358a76b523b3dfe7cb65da1630004fe6c5a7a45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"contracts/blitoadz/BlitoadzRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"@0xsequence/sstore2/contracts/SSTORE2.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\n\\nimport \\\"../interfaces/IBlitoadzRenderer.sol\\\";\\nimport \\\"../interfaces/IBlitmap.sol\\\";\\n\\nimport {Integers} from \\\"../lib/Integers.sol\\\";\\n\\n/*  @title Blitoadz Renderer\\n    @author Clement Walter\\n    @dev Encode each one of the 56 toadz in a single byte with a leading 57 uint16 for indexes.\\n         Color palettes is dropped because blitmap colors are used instead.\\n*/\\ncontract BlitoadzRenderer is Ownable, ReentrancyGuard, IBlitoadzRenderer {\\n    using Strings for uint256;\\n    using Integers for uint8;\\n\\n    // We have a total of 4 * 6 = 24 bits = 3 bytes for coordinates + 1 byte for the color\\n    // Hence each rect is 4 bytes\\n    uint8 public constant BITS_PER_FILL_INDEX = 2;\\n\\n    string public constant RECT_TAG_START = \\\"%3crect%20x=%27\\\";\\n    string public constant Y_TAG = \\\"%27%20y=%27\\\";\\n    string public constant WH_FILL_TAG =\\n        \\\"%27%20width=%271%27%20height=%271%27%20fill=%27%23\\\";\\n    string public constant RECT_TAG_END = \\\"%27/%3e\\\";\\n    string public constant SVG_TAG_START =\\n        \\\"%3csvg%20xmlns=%27http://www.w3.org/2000/svg%27%20viewBox=%270%200%2036%2036%27%20width=%27360px%27%20height=%27360px%27%3e\\\";\\n    string public constant SVG_TAG_END =\\n        \\\"%3cstyle%3erect{shape-rendering:crispEdges}%3c/style%3e%3c/svg%3e\\\";\\n\\n    address public toadz; // 57 uint16 leading indexes followed by the actual 56 toadz images\\n    address public toadzNames; // 57 uint16 leading indexes followed by the actual 56 toadz names\\n    IBlitmap blitmap;\\n\\n    ////////////////////////////////////////////////////////////////////////////////\\n    ////////////////////////////  Rendering mechanics  /////////////////////////////\\n    ////////////////////////////////////////////////////////////////////////////////\\n    /// @dev Indexes and images are concatenated and stored in a single 'bytes' with SSTORE2 to save gas.\\n    constructor(address _blitmap) {\\n        blitmap = IBlitmap(_blitmap);\\n    }\\n\\n    function setToadz(bytes calldata _toadz) external onlyOwner {\\n        toadz = SSTORE2.write(_toadz);\\n    }\\n\\n    function setToadzNames(bytes calldata _toadzNames) external onlyOwner {\\n        toadzNames = SSTORE2.write(_toadzNames);\\n    }\\n\\n    function getToadzBytes(uint256 _index) public view returns (bytes memory) {\\n        uint16 start = BytesLib.toUint16(\\n            SSTORE2.read(toadz, 2 * _index, 2 * _index + 2),\\n            0\\n        );\\n        uint16 end = BytesLib.toUint16(\\n            SSTORE2.read(toadz, 2 * _index + 2, 2 * _index + 4),\\n            0\\n        );\\n        return SSTORE2.read(toadz, start + 57 * 2, end + 57 * 2);\\n    }\\n\\n    function getToadzName(uint256 _index) public view returns (string memory) {\\n        uint16 start = BytesLib.toUint16(\\n            SSTORE2.read(toadzNames, 2 * _index, 2 * _index + 2),\\n            0\\n        );\\n        uint16 end = BytesLib.toUint16(\\n            SSTORE2.read(toadzNames, 2 * _index + 2, 2 * _index + 4),\\n            0\\n        );\\n        return string(SSTORE2.read(toadzNames, start + 57 * 2, end + 57 * 2));\\n    }\\n\\n    /// @dev 3 bytes per color because svg does not handle alpha.\\n    function getFill(bytes memory palette, uint256 _index)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return\\n            string.concat(\\n                uint8(palette[3 * _index]).toString(16, 2),\\n                uint8(palette[3 * _index + 1]).toString(16, 2),\\n                uint8(palette[3 * _index + 2]).toString(16, 2)\\n            );\\n    }\\n\\n    function decode1Pixel(\\n        uint256 index,\\n        bytes1 _byte,\\n        string[4] memory palette\\n    ) internal pure returns (string memory) {\\n        return\\n            string.concat(\\n                RECT_TAG_START,\\n                (index % 36).toString(),\\n                Y_TAG,\\n                (index / 36).toString(),\\n                WH_FILL_TAG,\\n                palette[uint8(_byte)],\\n                RECT_TAG_END\\n            );\\n    }\\n\\n    /// @dev 1 byte is 4 color indexes, so 4 rect\\n    function decode4Pixels(\\n        uint256 startIndex,\\n        bytes1 _byte,\\n        string[4] memory palette\\n    ) internal pure returns (string memory) {\\n        return\\n            string.concat(\\n                decode1Pixel(startIndex, _byte >> 6, palette),\\n                decode1Pixel(startIndex + 1, (_byte & 0x3f) >> 4, palette),\\n                decode1Pixel(startIndex + 2, (_byte & 0x0f) >> 2, palette),\\n                decode1Pixel(startIndex + 3, _byte & 0x03, palette)\\n            );\\n    }\\n\\n    function decode16Pixels(\\n        uint256 startIndex,\\n        bytes memory _bytes,\\n        string[4] memory palette\\n    ) internal pure returns (string memory) {\\n        return\\n            string.concat(\\n                decode4Pixels(startIndex + 0, _bytes[0], palette),\\n                decode4Pixels(startIndex + 4, _bytes[1], palette),\\n                decode4Pixels(startIndex + 8, _bytes[2], palette),\\n                decode4Pixels(startIndex + 12, _bytes[3], palette)\\n            );\\n    }\\n\\n    function decode128Pixels(\\n        uint256 startIndex,\\n        bytes memory _bytes,\\n        string[4] memory palette\\n    ) internal pure returns (string memory) {\\n        return\\n            string.concat(\\n                decode16Pixels(\\n                    startIndex + 0,\\n                    BytesLib.slice(_bytes, 0, 4),\\n                    palette\\n                ),\\n                decode16Pixels(\\n                    startIndex + 16,\\n                    BytesLib.slice(_bytes, 4, 4),\\n                    palette\\n                ),\\n                decode16Pixels(\\n                    startIndex + 32,\\n                    BytesLib.slice(_bytes, 8, 4),\\n                    palette\\n                ),\\n                decode16Pixels(\\n                    startIndex + 48,\\n                    BytesLib.slice(_bytes, 12, 4),\\n                    palette\\n                ),\\n                decode16Pixels(\\n                    startIndex + 64,\\n                    BytesLib.slice(_bytes, 16, 4),\\n                    palette\\n                ),\\n                decode16Pixels(\\n                    startIndex + 80,\\n                    BytesLib.slice(_bytes, 20, 4),\\n                    palette\\n                ),\\n                decode16Pixels(\\n                    startIndex + 96,\\n                    BytesLib.slice(_bytes, 24, 4),\\n                    palette\\n                ),\\n                decode16Pixels(\\n                    startIndex + 112,\\n                    BytesLib.slice(_bytes, 28, 4),\\n                    palette\\n                )\\n            );\\n    }\\n\\n    function decode1296Pixels(bytes memory _bytes, string[4] memory palette)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return\\n            string.concat(\\n                decode128Pixels(\\n                    0 * 128,\\n                    BytesLib.slice(_bytes, 0 * 32, 32),\\n                    palette\\n                ),\\n                decode128Pixels(\\n                    1 * 128,\\n                    BytesLib.slice(_bytes, 1 * 32, 32),\\n                    palette\\n                ),\\n                decode128Pixels(\\n                    2 * 128,\\n                    BytesLib.slice(_bytes, 2 * 32, 32),\\n                    palette\\n                ),\\n                decode128Pixels(\\n                    3 * 128,\\n                    BytesLib.slice(_bytes, 3 * 32, 32),\\n                    palette\\n                ),\\n                decode128Pixels(\\n                    4 * 128,\\n                    BytesLib.slice(_bytes, 4 * 32, 32),\\n                    palette\\n                ),\\n                decode128Pixels(\\n                    5 * 128,\\n                    BytesLib.slice(_bytes, 5 * 32, 32),\\n                    palette\\n                ),\\n                decode128Pixels(\\n                    6 * 128,\\n                    BytesLib.slice(_bytes, 6 * 32, 32),\\n                    palette\\n                ),\\n                decode128Pixels(\\n                    7 * 128,\\n                    BytesLib.slice(_bytes, 7 * 32, 32),\\n                    palette\\n                ),\\n                decode128Pixels(\\n                    8 * 128,\\n                    BytesLib.slice(_bytes, 8 * 32, 32),\\n                    palette\\n                ),\\n                decode128Pixels(\\n                    9 * 128,\\n                    BytesLib.slice(_bytes, 9 * 32, 32),\\n                    palette\\n                ),\\n                decode16Pixels(\\n                    10 * 128,\\n                    BytesLib.slice(_bytes, 320, 4),\\n                    palette\\n                )\\n            );\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////////////\\n    /////////////////////////////////  Blitoadz  ///////////////////////////////////\\n    ////////////////////////////////////////////////////////////////////////////////\\n\\n    /// @dev Decode the rect and returns it as a plain string to be used in the svg rect attribute.\\n    function getBlitoadz(\\n        uint256 toadzId,\\n        uint256 blitmapId,\\n        uint8 paletteOrder\\n    ) public view returns (string memory) {\\n        bytes memory toadzBytes = getToadzBytes(toadzId);\\n        bytes memory palette = BytesLib.slice(\\n            blitmap.tokenDataOf(blitmapId),\\n            0,\\n            12\\n        );\\n        string[4] memory paletteHex = [\\n            getFill(palette, paletteOrder >> 6),\\n            getFill(palette, (paletteOrder >> 4) & 0x3),\\n            getFill(palette, (paletteOrder >> 2) & 0x3),\\n            getFill(palette, paletteOrder & 0x3)\\n        ];\\n        return\\n            string.concat(\\n                SVG_TAG_START,\\n                decode1296Pixels(toadzBytes, paletteHex),\\n                SVG_TAG_END\\n            );\\n    }\\n\\n    function getImageURI(\\n        uint256 toadzId,\\n        uint256 blitmapId,\\n        uint8 paletteOrder\\n    ) public view returns (string memory) {\\n        return\\n            string.concat(\\n                \\\"data:image/svg+xml,\\\",\\n                getBlitoadz(toadzId, blitmapId, paletteOrder)\\n            );\\n    }\\n\\n    function tokenURI(\\n        uint256 toadzId,\\n        uint256 blitmapId,\\n        uint8 paletteOrder\\n    ) public view returns (string memory) {\\n        return\\n            string.concat(\\n                \\\"data:application/json,\\\",\\n                '{\\\"image_data\\\": \\\"',\\n                getImageURI(toadzId, blitmapId, paletteOrder),\\n                '\\\"',\\n                ',\\\"description\\\": \\\"Blitoadz are a blitmap and CrypToadz cross-breed, paving the way toward a new blitzverse. Oh - and they\\\\'re fully on-chain.\\\"',\\n                ',\\\"name\\\": \\\"',\\n                getToadzName(toadzId),\\n                \\\" \\\",\\n                blitmap.tokenNameOf(blitmapId),\\n                '\\\"}'\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x70cefe2017ff54ba30681e7a3b11ddf041fc0786319a79ab89995b0255d24fd7\",\"license\":\"MIT\"},\"contracts/interfaces/IBlitmap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\ninterface IBlitmap {\\n    function tokenDataOf(uint256 tokenId) external view returns (bytes memory);\\n\\n    function tokenCreatorOf(uint256 tokenId) external view returns (address);\\n\\n    function tokenNameOf(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6bb0fce880be0ac54e396a1aa4ddce98139a12a96c6ccd884ba3c0324128e792\",\"license\":\"MIT\"},\"contracts/interfaces/IBlitoadzRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\ninterface IBlitoadzRenderer {\\n    function tokenURI(\\n        uint256 toadzId,\\n        uint256 blitmapId,\\n        uint8 paletteOrder\\n    ) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa24fc748b709d352fc3fd7b466e8e7d2e54a1e20d5e85768546ddcc164dace6f\",\"license\":\"MIT\"},\"contracts/lib/Integers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * Integers Library updated from https://github.com/willitscale/solidity-util\\n *\\n * In summary this is a simple library of integer functions which allow a simple\\n * conversion to and from strings\\n *\\n * @author Clement Walter <clement0walter@gmail.com>\\n */\\nlibrary Integers {\\n    /**\\n     * To String\\n     *\\n     * Converts an unsigned integer to the string equivalent value, returned as bytes\\n     * Equivalent to javascript's toString(base)\\n     *\\n     * @param _number The unsigned integer to be converted to a string\\n     * @param _base The base to convert the number to\\n     * @param  _padding The target length of the string; result will be padded with 0 to reach this length while padding\\n     *         of 0 means no padding\\n     * @return bytes The resulting ASCII string value\\n     */\\n    function toString(\\n        uint256 _number,\\n        uint8 _base,\\n        uint8 _padding\\n    ) public pure returns (string memory) {\\n        uint256 count = 0;\\n        uint256 b = _number;\\n        while (b != 0) {\\n            count++;\\n            b /= _base;\\n        }\\n        if (_number == 0) {\\n            count++;\\n        }\\n        bytes memory res;\\n        if (_padding == 0) {\\n            res = new bytes(count);\\n        } else {\\n            res = new bytes(_padding);\\n        }\\n        for (uint256 i = 0; i < count; ++i) {\\n            b = _number % _base;\\n            if (b < 10) {\\n                res[res.length - i - 1] = bytes1(uint8(b + 48)); // 0-9\\n            } else {\\n                res[res.length - i - 1] = bytes1(uint8((b % 10) + 65)); // A-F\\n            }\\n            _number /= _base;\\n        }\\n\\n        for (uint256 i = count; i < _padding; ++i) {\\n            res[res.length - i - 1] = hex\\\"30\\\"; // 0\\n        }\\n\\n        return string(res);\\n    }\\n\\n    function toString(uint256 _number) public pure returns (string memory) {\\n        return toString(_number, 10, 0);\\n    }\\n\\n    function toString(uint256 _number, uint8 _base)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return toString(_number, _base, 0);\\n    }\\n\\n    /**\\n     * Load 16\\n     *\\n     * Converts two bytes to a 16 bit unsigned integer\\n     *\\n     * @param _leadingBytes the first byte of the unsigned integer in [256, 65536]\\n     * @param _endingBytes the second byte of the unsigned integer in [0, 255]\\n     * @return uint16 The resulting integer value\\n     */\\n    function load16(bytes1 _leadingBytes, bytes1 _endingBytes)\\n        public\\n        pure\\n        returns (uint16)\\n    {\\n        return\\n            (uint16(uint8(_leadingBytes)) << 8) + uint16(uint8(_endingBytes));\\n    }\\n\\n    /**\\n     * Load 12\\n     *\\n     * Converts three bytes into two uint12 integers\\n     *\\n     * @return (uint16, uint16) The two uint16 values up to 2^12 each\\n     */\\n    function load12x2(\\n        bytes1 first,\\n        bytes1 second,\\n        bytes1 third\\n    ) public pure returns (uint16, uint16) {\\n        return (\\n            (uint16(uint8(first)) << 4) + (uint16(uint8(second)) >> 4),\\n            (uint16(uint8(second & hex\\\"0f\\\")) << 8) + uint16(uint8(third))\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x0f5b1dfb605720cb17df14949849463b989e5f65969c595de9aa62fd28bf7b2d\",\"license\":\"MIT\"},\"solidity-bytes-utils/contracts/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xf75784dfc94ea43668eb195d5690a1dde1b6eda62017e73a3899721583821d29\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620022b8380380620022b88339810160408190526200003491620000f3565b6200003f3362000069565b60018055600480546001600160a01b0319166001600160a01b039290921691909117905562000120565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006001600160a01b0382165b92915050565b620000d781620000b9565b8114620000e357600080fd5b50565b8051620000c681620000cc565b6000602082840312156200010a576200010a600080fd5b6000620001188484620000e6565b949350505050565b61218880620001306000396000f3fe608060405234801561001057600080fd5b506004361061016c5760003560e01c8063715018a6116100cd578063b3215d4911610081578063bd1798f611610066578063bd1798f614610328578063c4534ca21461033b578063f2fde38b1461034e57600080fd5b8063b3215d4914610300578063bc2255641461031557600080fd5b80638667f1d2116100b25780638667f1d2146102c957806389e4b1e8146102dc5780638da5cb5b146102ef57600080fd5b8063715018a6146102ae578063779dd948146102b657600080fd5b806347c3a430116101245780634d32bd7d116101095780634d32bd7d1461022e57806369db9ed01461026a5780636f5c723b146102a657600080fd5b806347c3a43014610213578063480bc3c81461022657600080fd5b80633774c798116101555780633774c798146101af5780633fc9aff0146101c2578063407134de146101d757600080fd5b80630a41f5da146101715780630bdd03f11461018f575b600080fd5b610179610361565b6040516101869190611550565b60405180910390f35b6002546101a2906001600160a01b031681565b6040516101869190611581565b6101796101bd3660046116a2565b61037d565b6101d56101d036600461174b565b6105ae565b005b6101796040518060400160405280600781526020017f2532372f2533650000000000000000000000000000000000000000000000000081525081565b6003546101a2906001600160a01b031681565b610179610651565b6101796040518060400160405280600b81526020017f253237253230793d25323700000000000000000000000000000000000000000081525081565b6101796040518060400160405280600f81526020017f25336372656374253230783d253237000000000000000000000000000000000081525081565b61017961066d565b6101d5610689565b6101d56102c436600461174b565b6106bf565b6101796102d73660046117a7565b610759565b6101796102ea3660046117f7565b61078f565b6000546001600160a01b03166101a2565b610308600281565b6040516101869190611821565b6101796103233660046117a7565b61085e565b6101796103363660046117a7565b6109da565b6101796103493660046117f7565b610a8f565b6101d561035c366004611843565b610af7565b6040518060600160405280603281526020016120e06032913981565b60608261038b83600361187a565b8151811061039b5761039b611899565b016020015160405163c1338a6960e01b815273e5d03576716d2D66Becf01a3F3BC7B80eb05952E9163c1338a69916103df9160f81c906010906002906004016118c9565b600060405180830381865af41580156103fc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104249190810190611949565b8361043084600361187a565b61043b906001611984565b8151811061044b5761044b611899565b016020015160405163c1338a6960e01b815273e5d03576716d2D66Becf01a3F3BC7B80eb05952E9163c1338a699161048f9160f81c906010906002906004016118c9565b600060405180830381865af41580156104ac573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104d49190810190611949565b846104e085600361187a565b6104eb906002611984565b815181106104fb576104fb611899565b016020015160405163c1338a6960e01b815273e5d03576716d2D66Becf01a3F3BC7B80eb05952E9163c1338a699161053f9160f81c906010906002906004016118c9565b600060405180830381865af415801561055c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105849190810190611949565b604051602001610596939291906119be565b60405160208183030381529060405290505b92915050565b6000546001600160a01b031633146105e15760405162461bcd60e51b81526004016105d890611a12565b60405180910390fd5b61062082828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b5392505050565b6003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03929092169190911790555050565b6040518060a00160405280607b8152602001612065607b913981565b6040518060800160405280604181526020016121126041913981565b6000546001600160a01b031633146106b35760405162461bcd60e51b81526004016105d890611a12565b6106bd6000610bd1565b565b6000546001600160a01b031633146106e95760405162461bcd60e51b81526004016105d890611a12565b61072882828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b5392505050565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03929092169190911790555050565b606061076684848461085e565b6040516020016107769190611a22565b60405160208183030381529060405290505b9392505050565b600280546060916000916107d8916107d1916001600160a01b0316906107b690879061187a565b6107c187600261187a565b6107cc906002611984565b610c2e565b6000610c4f565b60028054919250600091610820916107d1916001600160a01b0316906107ff90889061187a565b61080a906002611984565b61081588600261187a565b6107cc906004611984565b600254909150610856906001600160a01b031661083e846072611a52565b61ffff1661084d846072611a52565b61ffff16610c2e565b949350505050565b6060600061086b8561078f565b600480546040517fc0da9bcd00000000000000000000000000000000000000000000000000000000815292935060009261090b926001600160a01b039092169163c0da9bcd916108bd918a9101611a76565b600060405180830381865afa1580156108da573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109029190810190611949565b6000600c610c85565b90506000604051806080016040528061092e8460068960ff16901c60ff1661037d565b815260200161094484600360048a901c1661037d565b815260200161095a84600360028a901c1661037d565b815260200161096c846003891661037d565b81525090506040518060a00160405280607b8152602001612065607b91396109948483610d4d565b604051806080016040528060418152602001612112604191396040516020016109bf939291906119be565b60405160208183030381529060405293505050509392505050565b60606109e7848484610759565b6109f085610a8f565b600480546040517fe324c6640000000000000000000000000000000000000000000000000000000081526001600160a01b039091169163e324c66491610a3891899101611a76565b600060405180830381865afa158015610a55573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a7d9190810190611949565b60405160200161077693929190611a84565b600354606090600090610ab4906107d1906001600160a01b03166107b686600261187a565b600354909150600090610ad9906107d1906001600160a01b03166107ff87600261187a565b600354909150610856906001600160a01b031661083e846072611a52565b6000546001600160a01b03163314610b215760405162461bcd60e51b81526004016105d890611a12565b6001600160a01b038116610b475760405162461bcd60e51b81526004016105d890611c5f565b610b5081610bd1565b50565b600080610b7e83604051602001610b6a9190611ccb565b604051602081830303815290604052610e7c565b90508051602082016000f091506001600160a01b038216610bcb576040517f08d4abb600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50919050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b606061085684610c3f856001611984565b610c4a856001611984565b610ea8565b6000610c5c826002611984565b83511015610c7c5760405162461bcd60e51b81526004016105d890611d12565b50016002015190565b606081610c9381601f611984565b1015610cb15760405162461bcd60e51b81526004016105d890611d54565b610cbb8284611984565b84511015610cdb5760405162461bcd60e51b81526004016105d890611d96565b606082158015610cfa5760405191506000825260208201604052610d44565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015610d33578051835260209283019201610d1b565b5050858452601f01601f1916604052505b50949350505050565b6060610d676000610d618560006020610c85565b84610f67565b610d7e6080610d7886602080610c85565b85610f67565b610d97610100610d918760406020610c85565b86610f67565b610db0610180610daa8860606020610c85565b87610f67565b610dc9610200610dc38960806020610c85565b88610f67565b610de2610280610ddc8a60a06020610c85565b89610f67565b610dfb610300610df58b60c06020610c85565b8a610f67565b610e14610380610e0e8c60e06020610c85565b8b610f67565b610e2e610400610e288d6101006020610c85565b8c610f67565b610e48610480610e428e6101206020610c85565b8d610f67565b610e62610500610e5c8f6101406004610c85565b8e611087565b6040516020016105969b9a99989796959493929190611da6565b6060815182604051602001610e92929190611e7b565b6040516020818303038152906040529050919050565b6060833b80610ec7575050604080516020810190915260008152610788565b80841115610ee5575050604080516020810190915260008152610788565b83831015610f25578084846040517f2c4a89fa0000000000000000000000000000000000000000000000000000000081526004016105d893929190611ecc565b8383038482036000828210610f3a5782610f3c565b815b60408051603f8301601f19168101909152818152955090508087602087018a3c505050509392505050565b6060610f8a610f77856000611984565b610f848560006004610c85565b84611087565b610faa610f98866010611984565b610fa486600480610c85565b85611087565b610fcb610fb8876020611984565b610fc58760086004610c85565b86611087565b610fec610fd9886030611984565b610fe688600c6004610c85565b87611087565b61100d610ffa896040611984565b6110078960106004610c85565b88611087565b61102e61101b8a6050611984565b6110288a60146004610c85565b89611087565b61104f61103c8b6060611984565b6110498b60186004610c85565b8a611087565b61107061105d8c6070611984565b61106a8c601c6004610c85565b8b611087565b604051602001610776989796959493929190611ef4565b60606110d7611097856000611984565b846000815181106110aa576110aa611899565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016846111d4565b6111256110e5866004611984565b856001815181106110f8576110f8611899565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016856111d4565b611173611133876008611984565b8660028151811061114657611146611899565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016866111d4565b6111c161118188600c611984565b8760038151811061119457611194611899565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016876111d4565b6040516020016107769493929190611f5f565b6060611207847f03fc000000000000000000000000000000000000000000000000000000000000600686901c16846112b0565b611242611215866001611984565b7f03f0000000000000000000000000000000000000000000000000000000000000600487901c16856112b0565b61127d611250876002611984565b7f03c0000000000000000000000000000000000000000000000000000000000000600288901c16866112b0565b6111c161128b886003611984565b7f03000000000000000000000000000000000000000000000000000000000000008816875b60408051808201909152600f81527f25336372656374253230783d253237000000000000000000000000000000000060208201526060906112fa6112f5602487611fac565b6113bc565b60408051808201909152600b81527f253237253230793d253237000000000000000000000000000000000000000000602082015261133c6112f5602489611fc0565b6040518060600160405280603281526020016120e0603291398660f889901c6004811061136b5761136b611899565b60200201516040518060400160405280600781526020017f2532372f253365000000000000000000000000000000000000000000000000008152506040516020016107769796959493929190611fd4565b6060816113fc57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115611426578061141081612032565b915061141f9050600a83611fc0565b9150611400565b60008167ffffffffffffffff8111156114415761144161158f565b6040519080825280601f01601f19166020018201604052801561146b576020820181803683370190505b5090505b84156108565761148060018361204d565b915061148d600a86611fac565b611498906030611984565b60f81b8183815181106114ad576114ad611899565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506114e7600a86611fc0565b945061146f565b60005b838110156115095781810151838201526020016114f1565b83811115611518576000848401525b50505050565b6000611528825190565b80845260208401935061153f8185602086016114ee565b601f01601f19169290920192915050565b60208082528101610788818461151e565b60006001600160a01b0382166105a8565b61157b81611561565b82525050565b602081016105a88284611572565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff821117156115cb576115cb61158f565b6040525050565b60006115dd60405190565b90506115e982826115a5565b919050565b600067ffffffffffffffff8211156116085761160861158f565b601f19601f83011660200192915050565b82818337506000910152565b6000611638611633846115ee565b6115d2565b90508281526020810184848401111561165357611653600080fd5b61165e848285611619565b509392505050565b600082601f83011261167a5761167a600080fd5b8135610856848260208601611625565b805b8114610b5057600080fd5b80356105a88161168a565b600080604083850312156116b8576116b8600080fd5b823567ffffffffffffffff8111156116d2576116d2600080fd5b6116de85828601611666565b92505060206116ef85828601611697565b9150509250929050565b60008083601f84011261170e5761170e600080fd5b50813567ffffffffffffffff81111561172957611729600080fd5b60208301915083600182028301111561174457611744600080fd5b9250929050565b6000806020838503121561176157611761600080fd5b823567ffffffffffffffff81111561177b5761177b600080fd5b611787858286016116f9565b92509250509250929050565b60ff811661168c565b80356105a881611793565b6000806000606084860312156117bf576117bf600080fd5b60006117cb8686611697565b93505060206117dc86828701611697565b92505060406117ed8682870161179c565b9150509250925092565b60006020828403121561180c5761180c600080fd5b60006108568484611697565b60ff811661157b565b602081016105a88284611818565b61168c81611561565b80356105a88161182f565b60006020828403121561185857611858600080fd5b60006108568484611838565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561189457611894611864565b500290565b634e487b7160e01b600052603260045260246000fd5b8061157b565b600060ff82166105a8565b61157b816118b5565b606081016118d782866118af565b6118e460208301856118c0565b61085660408301846118c0565b60006118ff611633846115ee565b90508281526020810184848401111561191a5761191a600080fd5b61165e8482856114ee565b600082601f83011261193957611939600080fd5b81516108568482602086016118f1565b60006020828403121561195e5761195e600080fd5b815167ffffffffffffffff81111561197857611978600080fd5b61085684828501611925565b6000821982111561199757611997611864565b500190565b60006119a6825190565b6119b48185602086016114ee565b9290920192915050565b6119c8818561199c565b90506119d4818461199c565b9050610856818361199c565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081525b60200190565b602080825281016105a8816119e0565b7f646174613a696d6167652f7376672b786d6c2c0000000000000000000000000081526013016105a8818361199c565b61ffff8116905061ffff8216915060008261ffff0382111561199757611997611864565b602081016105a882846118af565b7f646174613a6170706c69636174696f6e2f6a736f6e2c000000000000000000008152601601611ad3817f7b22696d6167655f64617461223a2022000000000000000000000000000000009052565b601001611ae0818561199c565b7f220000000000000000000000000000000000000000000000000000000000000081529050600101611bcd817f2c226465736372697074696f6e223a2022426c69746f61647a2061726520612081527f626c69746d617020616e642043727970546f61647a2063726f73732d6272656560208201527f642c20706176696e67207468652077617920746f776172642061206e6577206260408201527f6c69747a76657273652e204f68202d20616e6420746865792772652066756c6c60608201527f79206f6e2d636861696e2e2200000000000000000000000000000000000000006080820152608c0190565b7f2c226e616d65223a20220000000000000000000000000000000000000000000081529050600a01611bff818461199c565b7f200000000000000000000000000000000000000000000000000000000000000081529050600101611c31818361199c565b7f227d0000000000000000000000000000000000000000000000000000000000008152600201949350505050565b602080825281016105a881602681527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160208201527f6464726573730000000000000000000000000000000000000000000000000000604082015260600190565b600081525b60010190565b611cd481611cc0565b90506105a8818361199c565b60148152602081017f746f55696e7431365f6f75744f66426f756e647300000000000000000000000081529050611a0c565b602080825281016105a881611ce0565b600e8152602081017f736c6963655f6f766572666c6f7700000000000000000000000000000000000081529050611a0c565b602080825281016105a881611d22565b60118152602081017f736c6963655f6f75744f66426f756e647300000000000000000000000000000081529050611a0c565b602080825281016105a881611d64565b611db0818d61199c565b9050611dbc818c61199c565b9050611dc8818b61199c565b9050611dd4818a61199c565b9050611de0818961199c565b9050611dec818861199c565b9050611df8818761199c565b9050611e04818661199c565b9050611e10818561199c565b9050611e1c818461199c565b9050611e28818361199c565b9c9b505050505050505050505050565b7f63000000000000000000000000000000000000000000000000000000000000008152611cc5565b60006105a88260e01b90565b61157b63ffffffff8216611e60565b611e8481611e38565b9050611e908184611e6c565b600401611ec0817f80600e6000396000f30000000000000000000000000000000000000000000000815260090190565b9050610788818361199c565b60608101611eda82866118af565b611ee760208301856118af565b61085660408301846118af565b611efe818a61199c565b9050611f0a818961199c565b9050611f16818861199c565b9050611f22818761199c565b9050611f2e818661199c565b9050611f3a818561199c565b9050611f46818461199c565b9050611f52818361199c565b9998505050505050505050565b611f69818661199c565b9050611f75818561199c565b9050611f81818461199c565b9050611f8d818361199c565b95945050505050565b634e487b7160e01b600052601260045260246000fd5b600082611fbb57611fbb611f96565b500690565b600082611fcf57611fcf611f96565b500490565b611fde818961199c565b9050611fea818861199c565b9050611ff6818761199c565b9050612002818661199c565b905061200e818561199c565b905061201a818461199c565b9050612026818361199c565b98975050505050505050565b600060001982141561204657612046611864565b5060010190565b60008282101561205f5761205f611864565b50039056fe253363737667253230786d6c6e733d253237687474703a2f2f7777772e77332e6f72672f323030302f73766725323725323076696577426f783d25323730253230302532303336253230333625323725323077696474683d25323733363070782532372532306865696768743d253237333630707825323725336525323725323077696474683d253237312532372532306865696768743d2532373125323725323066696c6c3d2532372532332533637374796c65253365726563747b73686170652d72656e646572696e673a637269737045646765737d2533632f7374796c652533652533632f737667253365a26469706673582212201b2c679771829a97024ab41e7f004cbb66b3295f8ba8f89cd8638093e445f93f64736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061016c5760003560e01c8063715018a6116100cd578063b3215d4911610081578063bd1798f611610066578063bd1798f614610328578063c4534ca21461033b578063f2fde38b1461034e57600080fd5b8063b3215d4914610300578063bc2255641461031557600080fd5b80638667f1d2116100b25780638667f1d2146102c957806389e4b1e8146102dc5780638da5cb5b146102ef57600080fd5b8063715018a6146102ae578063779dd948146102b657600080fd5b806347c3a430116101245780634d32bd7d116101095780634d32bd7d1461022e57806369db9ed01461026a5780636f5c723b146102a657600080fd5b806347c3a43014610213578063480bc3c81461022657600080fd5b80633774c798116101555780633774c798146101af5780633fc9aff0146101c2578063407134de146101d757600080fd5b80630a41f5da146101715780630bdd03f11461018f575b600080fd5b610179610361565b6040516101869190611550565b60405180910390f35b6002546101a2906001600160a01b031681565b6040516101869190611581565b6101796101bd3660046116a2565b61037d565b6101d56101d036600461174b565b6105ae565b005b6101796040518060400160405280600781526020017f2532372f2533650000000000000000000000000000000000000000000000000081525081565b6003546101a2906001600160a01b031681565b610179610651565b6101796040518060400160405280600b81526020017f253237253230793d25323700000000000000000000000000000000000000000081525081565b6101796040518060400160405280600f81526020017f25336372656374253230783d253237000000000000000000000000000000000081525081565b61017961066d565b6101d5610689565b6101d56102c436600461174b565b6106bf565b6101796102d73660046117a7565b610759565b6101796102ea3660046117f7565b61078f565b6000546001600160a01b03166101a2565b610308600281565b6040516101869190611821565b6101796103233660046117a7565b61085e565b6101796103363660046117a7565b6109da565b6101796103493660046117f7565b610a8f565b6101d561035c366004611843565b610af7565b6040518060600160405280603281526020016120e06032913981565b60608261038b83600361187a565b8151811061039b5761039b611899565b016020015160405163c1338a6960e01b815273__$6cc8f8b41053aebd660af83ec8df928129$__9163c1338a69916103df9160f81c906010906002906004016118c9565b600060405180830381865af41580156103fc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104249190810190611949565b8361043084600361187a565b61043b906001611984565b8151811061044b5761044b611899565b016020015160405163c1338a6960e01b815273__$6cc8f8b41053aebd660af83ec8df928129$__9163c1338a699161048f9160f81c906010906002906004016118c9565b600060405180830381865af41580156104ac573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104d49190810190611949565b846104e085600361187a565b6104eb906002611984565b815181106104fb576104fb611899565b016020015160405163c1338a6960e01b815273__$6cc8f8b41053aebd660af83ec8df928129$__9163c1338a699161053f9160f81c906010906002906004016118c9565b600060405180830381865af415801561055c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105849190810190611949565b604051602001610596939291906119be565b60405160208183030381529060405290505b92915050565b6000546001600160a01b031633146105e15760405162461bcd60e51b81526004016105d890611a12565b60405180910390fd5b61062082828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b5392505050565b6003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03929092169190911790555050565b6040518060a00160405280607b8152602001612065607b913981565b6040518060800160405280604181526020016121126041913981565b6000546001600160a01b031633146106b35760405162461bcd60e51b81526004016105d890611a12565b6106bd6000610bd1565b565b6000546001600160a01b031633146106e95760405162461bcd60e51b81526004016105d890611a12565b61072882828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b5392505050565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03929092169190911790555050565b606061076684848461085e565b6040516020016107769190611a22565b60405160208183030381529060405290505b9392505050565b600280546060916000916107d8916107d1916001600160a01b0316906107b690879061187a565b6107c187600261187a565b6107cc906002611984565b610c2e565b6000610c4f565b60028054919250600091610820916107d1916001600160a01b0316906107ff90889061187a565b61080a906002611984565b61081588600261187a565b6107cc906004611984565b600254909150610856906001600160a01b031661083e846072611a52565b61ffff1661084d846072611a52565b61ffff16610c2e565b949350505050565b6060600061086b8561078f565b600480546040517fc0da9bcd00000000000000000000000000000000000000000000000000000000815292935060009261090b926001600160a01b039092169163c0da9bcd916108bd918a9101611a76565b600060405180830381865afa1580156108da573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109029190810190611949565b6000600c610c85565b90506000604051806080016040528061092e8460068960ff16901c60ff1661037d565b815260200161094484600360048a901c1661037d565b815260200161095a84600360028a901c1661037d565b815260200161096c846003891661037d565b81525090506040518060a00160405280607b8152602001612065607b91396109948483610d4d565b604051806080016040528060418152602001612112604191396040516020016109bf939291906119be565b60405160208183030381529060405293505050509392505050565b60606109e7848484610759565b6109f085610a8f565b600480546040517fe324c6640000000000000000000000000000000000000000000000000000000081526001600160a01b039091169163e324c66491610a3891899101611a76565b600060405180830381865afa158015610a55573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a7d9190810190611949565b60405160200161077693929190611a84565b600354606090600090610ab4906107d1906001600160a01b03166107b686600261187a565b600354909150600090610ad9906107d1906001600160a01b03166107ff87600261187a565b600354909150610856906001600160a01b031661083e846072611a52565b6000546001600160a01b03163314610b215760405162461bcd60e51b81526004016105d890611a12565b6001600160a01b038116610b475760405162461bcd60e51b81526004016105d890611c5f565b610b5081610bd1565b50565b600080610b7e83604051602001610b6a9190611ccb565b604051602081830303815290604052610e7c565b90508051602082016000f091506001600160a01b038216610bcb576040517f08d4abb600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50919050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b606061085684610c3f856001611984565b610c4a856001611984565b610ea8565b6000610c5c826002611984565b83511015610c7c5760405162461bcd60e51b81526004016105d890611d12565b50016002015190565b606081610c9381601f611984565b1015610cb15760405162461bcd60e51b81526004016105d890611d54565b610cbb8284611984565b84511015610cdb5760405162461bcd60e51b81526004016105d890611d96565b606082158015610cfa5760405191506000825260208201604052610d44565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015610d33578051835260209283019201610d1b565b5050858452601f01601f1916604052505b50949350505050565b6060610d676000610d618560006020610c85565b84610f67565b610d7e6080610d7886602080610c85565b85610f67565b610d97610100610d918760406020610c85565b86610f67565b610db0610180610daa8860606020610c85565b87610f67565b610dc9610200610dc38960806020610c85565b88610f67565b610de2610280610ddc8a60a06020610c85565b89610f67565b610dfb610300610df58b60c06020610c85565b8a610f67565b610e14610380610e0e8c60e06020610c85565b8b610f67565b610e2e610400610e288d6101006020610c85565b8c610f67565b610e48610480610e428e6101206020610c85565b8d610f67565b610e62610500610e5c8f6101406004610c85565b8e611087565b6040516020016105969b9a99989796959493929190611da6565b6060815182604051602001610e92929190611e7b565b6040516020818303038152906040529050919050565b6060833b80610ec7575050604080516020810190915260008152610788565b80841115610ee5575050604080516020810190915260008152610788565b83831015610f25578084846040517f2c4a89fa0000000000000000000000000000000000000000000000000000000081526004016105d893929190611ecc565b8383038482036000828210610f3a5782610f3c565b815b60408051603f8301601f19168101909152818152955090508087602087018a3c505050509392505050565b6060610f8a610f77856000611984565b610f848560006004610c85565b84611087565b610faa610f98866010611984565b610fa486600480610c85565b85611087565b610fcb610fb8876020611984565b610fc58760086004610c85565b86611087565b610fec610fd9886030611984565b610fe688600c6004610c85565b87611087565b61100d610ffa896040611984565b6110078960106004610c85565b88611087565b61102e61101b8a6050611984565b6110288a60146004610c85565b89611087565b61104f61103c8b6060611984565b6110498b60186004610c85565b8a611087565b61107061105d8c6070611984565b61106a8c601c6004610c85565b8b611087565b604051602001610776989796959493929190611ef4565b60606110d7611097856000611984565b846000815181106110aa576110aa611899565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016846111d4565b6111256110e5866004611984565b856001815181106110f8576110f8611899565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016856111d4565b611173611133876008611984565b8660028151811061114657611146611899565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016866111d4565b6111c161118188600c611984565b8760038151811061119457611194611899565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016876111d4565b6040516020016107769493929190611f5f565b6060611207847f03fc000000000000000000000000000000000000000000000000000000000000600686901c16846112b0565b611242611215866001611984565b7f03f0000000000000000000000000000000000000000000000000000000000000600487901c16856112b0565b61127d611250876002611984565b7f03c0000000000000000000000000000000000000000000000000000000000000600288901c16866112b0565b6111c161128b886003611984565b7f03000000000000000000000000000000000000000000000000000000000000008816875b60408051808201909152600f81527f25336372656374253230783d253237000000000000000000000000000000000060208201526060906112fa6112f5602487611fac565b6113bc565b60408051808201909152600b81527f253237253230793d253237000000000000000000000000000000000000000000602082015261133c6112f5602489611fc0565b6040518060600160405280603281526020016120e0603291398660f889901c6004811061136b5761136b611899565b60200201516040518060400160405280600781526020017f2532372f253365000000000000000000000000000000000000000000000000008152506040516020016107769796959493929190611fd4565b6060816113fc57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115611426578061141081612032565b915061141f9050600a83611fc0565b9150611400565b60008167ffffffffffffffff8111156114415761144161158f565b6040519080825280601f01601f19166020018201604052801561146b576020820181803683370190505b5090505b84156108565761148060018361204d565b915061148d600a86611fac565b611498906030611984565b60f81b8183815181106114ad576114ad611899565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506114e7600a86611fc0565b945061146f565b60005b838110156115095781810151838201526020016114f1565b83811115611518576000848401525b50505050565b6000611528825190565b80845260208401935061153f8185602086016114ee565b601f01601f19169290920192915050565b60208082528101610788818461151e565b60006001600160a01b0382166105a8565b61157b81611561565b82525050565b602081016105a88284611572565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff821117156115cb576115cb61158f565b6040525050565b60006115dd60405190565b90506115e982826115a5565b919050565b600067ffffffffffffffff8211156116085761160861158f565b601f19601f83011660200192915050565b82818337506000910152565b6000611638611633846115ee565b6115d2565b90508281526020810184848401111561165357611653600080fd5b61165e848285611619565b509392505050565b600082601f83011261167a5761167a600080fd5b8135610856848260208601611625565b805b8114610b5057600080fd5b80356105a88161168a565b600080604083850312156116b8576116b8600080fd5b823567ffffffffffffffff8111156116d2576116d2600080fd5b6116de85828601611666565b92505060206116ef85828601611697565b9150509250929050565b60008083601f84011261170e5761170e600080fd5b50813567ffffffffffffffff81111561172957611729600080fd5b60208301915083600182028301111561174457611744600080fd5b9250929050565b6000806020838503121561176157611761600080fd5b823567ffffffffffffffff81111561177b5761177b600080fd5b611787858286016116f9565b92509250509250929050565b60ff811661168c565b80356105a881611793565b6000806000606084860312156117bf576117bf600080fd5b60006117cb8686611697565b93505060206117dc86828701611697565b92505060406117ed8682870161179c565b9150509250925092565b60006020828403121561180c5761180c600080fd5b60006108568484611697565b60ff811661157b565b602081016105a88284611818565b61168c81611561565b80356105a88161182f565b60006020828403121561185857611858600080fd5b60006108568484611838565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561189457611894611864565b500290565b634e487b7160e01b600052603260045260246000fd5b8061157b565b600060ff82166105a8565b61157b816118b5565b606081016118d782866118af565b6118e460208301856118c0565b61085660408301846118c0565b60006118ff611633846115ee565b90508281526020810184848401111561191a5761191a600080fd5b61165e8482856114ee565b600082601f83011261193957611939600080fd5b81516108568482602086016118f1565b60006020828403121561195e5761195e600080fd5b815167ffffffffffffffff81111561197857611978600080fd5b61085684828501611925565b6000821982111561199757611997611864565b500190565b60006119a6825190565b6119b48185602086016114ee565b9290920192915050565b6119c8818561199c565b90506119d4818461199c565b9050610856818361199c565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081525b60200190565b602080825281016105a8816119e0565b7f646174613a696d6167652f7376672b786d6c2c0000000000000000000000000081526013016105a8818361199c565b61ffff8116905061ffff8216915060008261ffff0382111561199757611997611864565b602081016105a882846118af565b7f646174613a6170706c69636174696f6e2f6a736f6e2c000000000000000000008152601601611ad3817f7b22696d6167655f64617461223a2022000000000000000000000000000000009052565b601001611ae0818561199c565b7f220000000000000000000000000000000000000000000000000000000000000081529050600101611bcd817f2c226465736372697074696f6e223a2022426c69746f61647a2061726520612081527f626c69746d617020616e642043727970546f61647a2063726f73732d6272656560208201527f642c20706176696e67207468652077617920746f776172642061206e6577206260408201527f6c69747a76657273652e204f68202d20616e6420746865792772652066756c6c60608201527f79206f6e2d636861696e2e2200000000000000000000000000000000000000006080820152608c0190565b7f2c226e616d65223a20220000000000000000000000000000000000000000000081529050600a01611bff818461199c565b7f200000000000000000000000000000000000000000000000000000000000000081529050600101611c31818361199c565b7f227d0000000000000000000000000000000000000000000000000000000000008152600201949350505050565b602080825281016105a881602681527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160208201527f6464726573730000000000000000000000000000000000000000000000000000604082015260600190565b600081525b60010190565b611cd481611cc0565b90506105a8818361199c565b60148152602081017f746f55696e7431365f6f75744f66426f756e647300000000000000000000000081529050611a0c565b602080825281016105a881611ce0565b600e8152602081017f736c6963655f6f766572666c6f7700000000000000000000000000000000000081529050611a0c565b602080825281016105a881611d22565b60118152602081017f736c6963655f6f75744f66426f756e647300000000000000000000000000000081529050611a0c565b602080825281016105a881611d64565b611db0818d61199c565b9050611dbc818c61199c565b9050611dc8818b61199c565b9050611dd4818a61199c565b9050611de0818961199c565b9050611dec818861199c565b9050611df8818761199c565b9050611e04818661199c565b9050611e10818561199c565b9050611e1c818461199c565b9050611e28818361199c565b9c9b505050505050505050505050565b7f63000000000000000000000000000000000000000000000000000000000000008152611cc5565b60006105a88260e01b90565b61157b63ffffffff8216611e60565b611e8481611e38565b9050611e908184611e6c565b600401611ec0817f80600e6000396000f30000000000000000000000000000000000000000000000815260090190565b9050610788818361199c565b60608101611eda82866118af565b611ee760208301856118af565b61085660408301846118af565b611efe818a61199c565b9050611f0a818961199c565b9050611f16818861199c565b9050611f22818761199c565b9050611f2e818661199c565b9050611f3a818561199c565b9050611f46818461199c565b9050611f52818361199c565b9998505050505050505050565b611f69818661199c565b9050611f75818561199c565b9050611f81818461199c565b9050611f8d818361199c565b95945050505050565b634e487b7160e01b600052601260045260246000fd5b600082611fbb57611fbb611f96565b500690565b600082611fcf57611fcf611f96565b500490565b611fde818961199c565b9050611fea818861199c565b9050611ff6818761199c565b9050612002818661199c565b905061200e818561199c565b905061201a818461199c565b9050612026818361199c565b98975050505050505050565b600060001982141561204657612046611864565b5060010190565b60008282101561205f5761205f611864565b50039056fe253363737667253230786d6c6e733d253237687474703a2f2f7777772e77332e6f72672f323030302f73766725323725323076696577426f783d25323730253230302532303336253230333625323725323077696474683d25323733363070782532372532306865696768743d253237333630707825323725336525323725323077696474683d253237312532372532306865696768743d2532373125323725323066696c6c3d2532372532332533637374796c65253365726563747b73686170652d72656e646572696e673a637269737045646765737d2533632f7374796c652533652533632f737667253365a26469706673582212201b2c679771829a97024ab41e7f004cbb66b3295f8ba8f89cd8638093e445f93f64736f6c634300080c0033",
  "libraries": {
    "Integers": "0xe5d03576716d2D66Becf01a3F3BC7B80eb05952E"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Indexes and images are concatenated and stored in a single 'bytes' with SSTORE2 to save gas."
      },
      "getBlitoadz(uint256,uint256,uint8)": {
        "details": "Decode the rect and returns it as a plain string to be used in the svg rect attribute."
      },
      "getFill(bytes,uint256)": {
        "details": "3 bytes per color because svg does not handle alpha."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 225,
        "contract": "contracts/blitoadz/BlitoadzRenderer.sol:BlitoadzRenderer",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 333,
        "contract": "contracts/blitoadz/BlitoadzRenderer.sol:BlitoadzRenderer",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2002,
        "contract": "contracts/blitoadz/BlitoadzRenderer.sol:BlitoadzRenderer",
        "label": "toadz",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2004,
        "contract": "contracts/blitoadz/BlitoadzRenderer.sol:BlitoadzRenderer",
        "label": "toadzNames",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2007,
        "contract": "contracts/blitoadz/BlitoadzRenderer.sol:BlitoadzRenderer",
        "label": "blitmap",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IBlitmap)2839"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IBlitmap)2839": {
        "encoding": "inplace",
        "label": "contract IBlitmap",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}