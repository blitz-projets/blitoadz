{
  "address": "0x1a2ef9430429fa883f74611Fe2d1cBF60149408e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_rendererAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_founders",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "withdrawnAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint16",
              "name": "shares",
              "type": "uint16"
            },
            {
              "internalType": "uint8",
              "name": "remainingAllocation",
              "type": "uint8"
            }
          ],
          "internalType": "struct Blitoadz.Founder[]",
          "name": "_foundersData",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "_blitmapCreatorShares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_blitmap",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AllocationExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalToCurrentOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApproveToCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceQueryForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BlitmapIndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BlitoadzDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BlitoadzExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncorrectPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintZeroQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NothingToWithdraw",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerIndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PublicSaleNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ToadzAndBlitmapLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ToadzIndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenIndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "URIQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawalFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BlitmapCreatorWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FounderWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PublicSaleOpened",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newRenderer",
          "type": "address"
        }
      ],
      "name": "RendererChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BLITMAP_COUNT",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BLITOADZ_COUNT",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_PUBLIC_PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOADZ_COUNT",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blitmap",
      "outputs": [
        {
          "internalType": "contract IBlitmap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blitmapCreatorShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "blitmapIds",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "blitoadzExist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "founders",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "withdrawnAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint16",
          "name": "shares",
          "type": "uint16"
        },
        {
          "internalType": "uint8",
          "name": "remainingAllocation",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPublicSaleOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_toadzIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_blitmapIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_paletteOrders",
          "type": "uint256[]"
        }
      ],
      "name": "mintAllocation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_toadzIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_blitmapIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_paletteOrders",
          "type": "uint256[]"
        }
      ],
      "name": "mintPublicSale",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openPublicSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "palettes",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicSaleStartTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renderingContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_renderingContractAddress",
          "type": "address"
        }
      ],
      "name": "setRenderingContractAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "toadzIds",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "toadzId",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "blitmapId",
          "type": "uint8"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawBlitmapCreator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFounder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xbf4765ac2f7653af3568b2e7b9142fc92519293dd555689412c7c84b5e0c6bbb",
  "receipt": {
    "to": null,
    "from": "0x6966Bdb480e7f7A48A7f6B198eE8b9462A265401",
    "contractAddress": "0x1a2ef9430429fa883f74611Fe2d1cBF60149408e",
    "transactionIndex": 73,
    "gasUsed": "3065445",
    "logsBloom": "0x
    "blockHash": "0xc6b14408366a335b4cd9e08a78ce471dba4833b01816eb76ccec2e34f8be3f07",
    "transactionHash": "0xbf4765ac2f7653af3568b2e7b9142fc92519293dd555689412c7c84b5e0c6bbb",
    "logs": [
      {
        "transactionIndex": 73,
        "blockNumber": 14499400,
        "transactionHash": "0xbf4765ac2f7653af3568b2e7b9142fc92519293dd555689412c7c84b5e0c6bbb",
        "address": "0x1a2ef9430429fa883f74611Fe2d1cBF60149408e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006966bdb480e7f7a48a7f6b198ee8b9462a265401"
        ],
        "data": "0x",
        "logIndex": 127,
        "blockHash": "0xc6b14408366a335b4cd9e08a78ce471dba4833b01816eb76ccec2e34f8be3f07"
      },
      {
        "transactionIndex": 73,
        "blockNumber": 14499400,
        "transactionHash": "0xbf4765ac2f7653af3568b2e7b9142fc92519293dd555689412c7c84b5e0c6bbb",
        "address": "0x1a2ef9430429fa883f74611Fe2d1cBF60149408e",
        "topics": [
          "0xa00632ff71f043bcebbaa26952d3fd31a42e459b0dc8b686a91eb77725ee6680"
        ],
        "data": "0x0000000000000000000000009c6b3486eefba5f0a27442238123cc5dfbfd5b2c",
        "logIndex": 128,
        "blockHash": "0xc6b14408366a335b4cd9e08a78ce471dba4833b01816eb76ccec2e34f8be3f07"
      }
    ],
    "blockNumber": 14499400,
    "cumulativeGasUsed": "9036510",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Blitoadz",
    "BLTZ",
    "0x9C6B3486EeFBA5F0a27442238123CC5dFBfD5B2C",
    [
      "0xD246882E05D7DdB2C8476607312279f592789Cd6",
      "0x0C3c184C2c5Fc99aED927cE3513141eb3Ce684FA",
      "0xCADb5Aba304867FD2658f11c2EE41ed3A83f13D5",
      "0xFc7c18A7F0d53A924D6aF07814c47eEf0Fb4F7d7",
      "0x4298e663517593284Ad4FE199b21815BD48a9969",
      "0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00",
      "0xd42bd96B117dd6BD63280620EA981BF967A7aD2B",
      "0xD19BF5F0B785c6f1F6228C72A8A31C9f383a49c4",
      "0xb7b78C45036D5a089Ff85d39a0e0836037D1Dc52"
    ],
    [
      {
        "shares": 1680,
        "withdrawnAmount": 0,
        "remainingAllocation": 5
      },
      {
        "shares": 1400,
        "withdrawnAmount": 0,
        "remainingAllocation": 9
      },
      {
        "shares": 628,
        "withdrawnAmount": 0,
        "remainingAllocation": 5
      },
      {
        "shares": 628,
        "withdrawnAmount": 0,
        "remainingAllocation": 5
      },
      {
        "shares": 312,
        "withdrawnAmount": 0,
        "remainingAllocation": 2
      },
      {
        "shares": 0,
        "withdrawnAmount": 0,
        "remainingAllocation": 1
      },
      {
        "shares": 0,
        "withdrawnAmount": 0,
        "remainingAllocation": 1
      },
      {
        "shares": 0,
        "withdrawnAmount": 0,
        "remainingAllocation": 1
      },
      {
        "shares": 0,
        "withdrawnAmount": 0,
        "remainingAllocation": 1
      }
    ],
    952,
    "0x8d04a8c79cEB0889Bdd12acdF3Fa9D207eD3Ff63"
  ],
  "numDeployments": 1,
  "solcInputHash": "ab7f691cb6c87ded4dc4cbf94247b36a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_rendererAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_founders\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"withdrawnAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"shares\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"remainingAllocation\",\"type\":\"uint8\"}],\"internalType\":\"struct Blitoadz.Founder[]\",\"name\":\"_foundersData\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"_blitmapCreatorShares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_blitmap\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AllocationExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BlitmapIndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BlitoadzDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BlitoadzExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerIndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PublicSaleNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ToadzAndBlitmapLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ToadzIndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenIndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawalFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BlitmapCreatorWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FounderWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PublicSaleOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRenderer\",\"type\":\"address\"}],\"name\":\"RendererChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BLITMAP_COUNT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BLITOADZ_COUNT\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_PUBLIC_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOADZ_COUNT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blitmap\",\"outputs\":[{\"internalType\":\"contract IBlitmap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blitmapCreatorShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blitmapIds\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blitoadzExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"founders\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"withdrawnAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"shares\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"remainingAllocation\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPublicSaleOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_toadzIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_blitmapIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_paletteOrders\",\"type\":\"uint256[]\"}],\"name\":\"mintAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_toadzIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_blitmapIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_paletteOrders\",\"type\":\"uint256[]\"}],\"name\":\"mintPublicSale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openPublicSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"palettes\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleStartTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renderingContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_renderingContractAddress\",\"type\":\"address\"}],\"name\":\"setRenderingContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"toadzIds\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"toadzId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"blitmapId\",\"type\":\"uint8\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBlitmapCreator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFounder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mintAllocation(uint256[],uint256[],uint256[])\":{\"params\":{\"_blitmapIds\":\"the list of blitmapIds to use, 0 based indexes. On etherscan, this could be e.g. 99,23,87\",\"_paletteOrders\":\"the order of the mapping for the blitmap color palette. This uint8 is parsed as 4 uint2        and there are consequently only 24 relevant values, any permutation of 0, 1,  2, 3\",\"_toadzIds\":\"the list of toadzIds to use, 0 based indexes. On etherscan, this could be e.g. 12,53,1\"}},\"mintPublicSale(uint256[],uint256[],uint256[])\":{\"params\":{\"_blitmapIds\":\"the list of blitmapIds to use, 0 based indexes. On etherscan, this could be e.g. 99,23,87\",\"_paletteOrders\":\"the order of the mapping for the blitmap color palette. This uint8 is parsed as 4 uint2        and there are consequently only 24 relevant values, any permutation of 0, 1,  2, 3\",\"_toadzIds\":\"the list of toadzIds to use, 0 based indexes. On etherscan, this could be e.g. 12,53,1\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}. This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first. It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}. This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first. It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"mintAllocation(uint256[],uint256[],uint256[])\":{\"notice\":\"Free mint for addresses with an allocation. Lengths should match; at a given index the combination         toadzId, blitmapId and paletteOrder will be used to define the given blitoadz\"},\"mintPublicSale(uint256[],uint256[],uint256[])\":{\"notice\":\"Free mint for addresses with an allocation. Lengths should match; at a given index the combination         toadzId, blitmapId and paletteOrder will be used to define the given blitoadz\"},\"tokenURI(uint8,uint8)\":{\"notice\":\"Retrieve a tokenURI from the combination toadzId, blitmapId\"},\"withdrawBlitmapCreator()\":{\"notice\":\"Withdraw available funds for blitmap creator\"},\"withdrawFounder()\":{\"notice\":\"Withdraw available funds for blitoadz and toadz creators\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/blitoadz/Blitoadz.sol\":\"Blitoadz\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/blitoadz/Blitoadz.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"erc721a/contracts/ERC721A.sol\\\";\\nimport \\\"../interfaces/IBlitoadzRenderer.sol\\\";\\nimport \\\"../interfaces/IBlitmap.sol\\\";\\n\\ncontract OwnableDelegateProxy {}\\n\\ncontract ProxyRegistry {\\n    mapping(address => OwnableDelegateProxy) public proxies;\\n}\\n\\nerror PublicSaleOpen();\\nerror PublicSaleNotOpen();\\nerror BlitoadzExists();\\nerror ToadzIndexOutOfBounds();\\nerror BlitmapIndexOutOfBounds();\\nerror NothingToWithdraw();\\nerror WithdrawalFailed();\\nerror ToadzAndBlitmapLengthMismatch();\\nerror IncorrectPrice();\\nerror AllocationExceeded();\\nerror BlitoadzDoesNotExist();\\n\\ncontract Blitoadz is ERC721A, Ownable, ReentrancyGuard {\\n    // Constants\\n    uint256 public constant MINT_PUBLIC_PRICE = 0.056 ether;\\n    uint8 public constant TOADZ_COUNT = 56;\\n    uint8 public constant BLITMAP_COUNT = 100;\\n    uint16 public constant BLITOADZ_COUNT = 5_600;\\n    IBlitmap public blitmap;\\n\\n    // Blitoadz states variables\\n    bool[BLITOADZ_COUNT] public blitoadzExist;\\n    uint8[] public toadzIds;\\n    uint8[] public blitmapIds;\\n    uint8[] public palettes;\\n\\n    // Blitoadz funds split\\n    uint256 public blitmapCreatorShares;\\n    mapping(address => Founder) public founders;\\n    mapping(address => uint16) creatorAvailableAmount;\\n    uint256 receivedAmount;\\n\\n    struct Founder {\\n        uint128 withdrawnAmount;\\n        uint16 shares;\\n        uint8 remainingAllocation;\\n    }\\n\\n    // Events\\n    event PublicSaleOpened(uint256 timestamp);\\n    event RendererChanged(address newRenderer);\\n    event BlitmapCreatorWithdrawn(address account, uint256 amount);\\n    event FounderWithdrawn(address account, uint256 amount);\\n\\n    ////////////////////////////////////////////////////////////////////////\\n    ////////////////////////// Schedule ////////////////////////////////////\\n    ////////////////////////////////////////////////////////////////////////\\n    uint256 public publicSaleStartTimestamp;\\n\\n    function isPublicSaleOpen() public view returns (bool) {\\n        return\\n            block.timestamp > publicSaleStartTimestamp &&\\n            publicSaleStartTimestamp != 0;\\n    }\\n\\n    modifier whenPublicSaleOpen() {\\n        if (!isPublicSaleOpen()) revert PublicSaleNotOpen();\\n        _;\\n    }\\n\\n    modifier whenPublicSaleClosed() {\\n        if (isPublicSaleOpen()) revert PublicSaleNotOpen();\\n        _;\\n    }\\n\\n    function openPublicSale() external onlyOwner whenPublicSaleClosed {\\n        publicSaleStartTimestamp = block.timestamp;\\n        emit PublicSaleOpened(publicSaleStartTimestamp);\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////\\n    ////////////////////////// Token ///////////////////////////////////////\\n    ////////////////////////////////////////////////////////////////////////\\n    address public renderingContractAddress;\\n    IBlitoadzRenderer renderer;\\n\\n    function setRenderingContractAddress(address _renderingContractAddress)\\n        public\\n        onlyOwner\\n    {\\n        renderingContractAddress = _renderingContractAddress;\\n        renderer = IBlitoadzRenderer(renderingContractAddress);\\n        emit RendererChanged(renderingContractAddress);\\n    }\\n\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        address _rendererAddress,\\n        address[] memory _founders,\\n        Founder[] memory _foundersData,\\n        uint256 _blitmapCreatorShares,\\n        address _blitmap\\n    ) ERC721A(name_, symbol_) {\\n        setRenderingContractAddress(_rendererAddress);\\n\\n        for (uint256 i = 0; i < _founders.length; i++) {\\n            founders[_founders[i]] = _foundersData[i];\\n        }\\n\\n        blitmapCreatorShares = _blitmapCreatorShares;\\n        blitmap = IBlitmap(_blitmap);\\n    }\\n\\n    /// @notice Free mint for addresses with an allocation. Lengths should match; at a given index the combination\\n    ///         toadzId, blitmapId and paletteOrder will be used to define the given blitoadz\\n    /// @param _toadzIds the list of toadzIds to use, 0 based indexes. On etherscan, this could be e.g. 12,53,1\\n    /// @param _blitmapIds the list of blitmapIds to use, 0 based indexes. On etherscan, this could be e.g. 99,23,87\\n    /// @param _paletteOrders the order of the mapping for the blitmap color palette. This uint8 is parsed as 4 uint2\\n    ///        and there are consequently only 24 relevant values, any permutation of 0, 1,  2, 3\\n    /// @param isBlitoadzPayable should this blitoadz be counted for founders and creator claims\\n    function _mint(\\n        address to,\\n        uint256[] calldata _toadzIds,\\n        uint256[] calldata _blitmapIds,\\n        uint256[] calldata _paletteOrders,\\n        bool isBlitoadzPayable\\n    ) internal {\\n        for (uint256 i = 0; i < _toadzIds.length; i++) {\\n            uint256 toadzId = _toadzIds[i];\\n            uint256 blitmapId = _blitmapIds[i];\\n            if (blitoadzExist[toadzId * BLITMAP_COUNT + blitmapId])\\n                revert BlitoadzExists();\\n            if (toadzId > TOADZ_COUNT - 1) revert ToadzIndexOutOfBounds();\\n            if (blitmapId > BLITMAP_COUNT - 1) revert BlitmapIndexOutOfBounds();\\n            toadzIds.push(uint8(toadzId % type(uint8).max));\\n            blitmapIds.push(uint8(blitmapId % type(uint8).max));\\n            palettes.push(uint8(_paletteOrders[i] % type(uint8).max));\\n            blitoadzExist[toadzId * BLITMAP_COUNT + blitmapId] = true;\\n            if (isBlitoadzPayable)\\n                creatorAvailableAmount[blitmap.tokenCreatorOf(blitmapId)]++;\\n        }\\n\\n        _safeMint(to, _toadzIds.length);\\n    }\\n\\n    /// @notice Free mint for addresses with an allocation. Lengths should match; at a given index the combination\\n    ///         toadzId, blitmapId and paletteOrder will be used to define the given blitoadz\\n    /// @param _toadzIds the list of toadzIds to use, 0 based indexes. On etherscan, this could be e.g. 12,53,1\\n    /// @param _blitmapIds the list of blitmapIds to use, 0 based indexes. On etherscan, this could be e.g. 99,23,87\\n    /// @param _paletteOrders the order of the mapping for the blitmap color palette. This uint8 is parsed as 4 uint2\\n    ///        and there are consequently only 24 relevant values, any permutation of 0, 1,  2, 3\\n    function mintPublicSale(\\n        uint256[] calldata _toadzIds,\\n        uint256[] calldata _blitmapIds,\\n        uint256[] calldata _paletteOrders\\n    ) external payable whenPublicSaleOpen nonReentrant {\\n        if (_toadzIds.length != _blitmapIds.length)\\n            revert ToadzAndBlitmapLengthMismatch();\\n        if (msg.value != MINT_PUBLIC_PRICE * _toadzIds.length)\\n            revert IncorrectPrice();\\n\\n        _mint(_msgSender(), _toadzIds, _blitmapIds, _paletteOrders, true);\\n        receivedAmount += MINT_PUBLIC_PRICE * _toadzIds.length;\\n    }\\n\\n    /// @notice Free mint for addresses with an allocation. Lengths should match; at a given index the combination\\n    ///         toadzId, blitmapId and paletteOrder will be used to define the given blitoadz\\n    /// @param _toadzIds the list of toadzIds to use, 0 based indexes. On etherscan, this could be e.g. 12,53,1\\n    /// @param _blitmapIds the list of blitmapIds to use, 0 based indexes. On etherscan, this could be e.g. 99,23,87\\n    /// @param _paletteOrders the order of the mapping for the blitmap color palette. This uint8 is parsed as 4 uint2\\n    ///        and there are consequently only 24 relevant values, any permutation of 0, 1,  2, 3\\n    function mintAllocation(\\n        uint256[] calldata _toadzIds,\\n        uint256[] calldata _blitmapIds,\\n        uint256[] calldata _paletteOrders\\n    ) external nonReentrant {\\n        if (_toadzIds.length != _blitmapIds.length)\\n            revert ToadzAndBlitmapLengthMismatch();\\n        if (founders[_msgSender()].remainingAllocation < _toadzIds.length)\\n            revert AllocationExceeded();\\n        founders[_msgSender()].remainingAllocation -= uint8(\\n            _toadzIds.length % type(uint8).max\\n        );\\n        _mint(_msgSender(), _toadzIds, _blitmapIds, _paletteOrders, false);\\n    }\\n\\n    /// @notice Withdraw available funds for blitmap creator\\n    function withdrawBlitmapCreator() external nonReentrant returns (bool) {\\n        if (creatorAvailableAmount[_msgSender()] == 0)\\n            revert NothingToWithdraw();\\n        uint256 value = (MINT_PUBLIC_PRICE *\\n            creatorAvailableAmount[_msgSender()] *\\n            blitmapCreatorShares) / BLITOADZ_COUNT;\\n        (bool success, ) = _msgSender().call{value: value}(\\\"\\\");\\n        if (!success) revert WithdrawalFailed();\\n        emit BlitmapCreatorWithdrawn(_msgSender(), value);\\n        creatorAvailableAmount[_msgSender()] = 0;\\n        return success;\\n    }\\n\\n    /// @notice Withdraw available funds for blitoadz and toadz creators\\n    function withdrawFounder() external nonReentrant returns (bool) {\\n        uint256 value = (receivedAmount * founders[_msgSender()].shares) /\\n            BLITOADZ_COUNT -\\n            founders[_msgSender()].withdrawnAmount;\\n        if (value == 0) revert NothingToWithdraw();\\n        founders[_msgSender()].withdrawnAmount += uint128(\\n            value % type(uint128).max\\n        );\\n        (bool success, ) = _msgSender().call{value: value}(\\\"\\\");\\n        if (!success) revert WithdrawalFailed();\\n\\n        emit FounderWithdrawn(_msgSender(), value);\\n        return success;\\n    }\\n\\n    /// @notice Retrieve a tokenURI from the combination toadzId, blitmapId\\n    function tokenURI(uint8 toadzId, uint8 blitmapId)\\n        external\\n        view\\n        returns (string memory)\\n    {\\n        for (uint256 i = 0; i < toadzIds.length; i++) {\\n            if (toadzIds[i] == toadzId && blitmapIds[i] == blitmapId) {\\n                return tokenURI(i);\\n            }\\n        }\\n        revert BlitoadzDoesNotExist();\\n    }\\n\\n    function tokenURI(uint256 _tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        if (!_exists(_tokenId)) revert URIQueryForNonexistentToken();\\n        if (renderingContractAddress == address(0)) {\\n            return \\\"\\\";\\n        }\\n\\n        return\\n            renderer.tokenURI(\\n                toadzIds[_tokenId],\\n                blitmapIds[_tokenId],\\n                palettes[_tokenId]\\n            );\\n    }\\n\\n    function exists(uint256 _tokenId) external view returns (bool) {\\n        return _exists(_tokenId);\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x1ba165a0d66be6fad7dfbf85767500184abcf764acb392d3ef276c74c3597b3f\",\"license\":\"MIT\"},\"contracts/interfaces/IBlitmap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\ninterface IBlitmap {\\n    function tokenDataOf(uint256 tokenId) external view returns (bytes memory);\\n\\n    function tokenCreatorOf(uint256 tokenId) external view returns (address);\\n\\n    function tokenNameOf(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6bb0fce880be0ac54e396a1aa4ddce98139a12a96c6ccd884ba3c0324128e792\",\"license\":\"MIT\"},\"contracts/interfaces/IBlitoadzRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\ninterface IBlitoadzRenderer {\\n    function tokenURI(\\n        uint256 toadzId,\\n        uint256 blitmapId,\\n        uint8 paletteOrder\\n    ) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa24fc748b709d352fc3fd7b466e8e7d2e54a1e20d5e85768546ddcc164dace6f\",\"license\":\"MIT\"},\"erc721a/contracts/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\\n\\nerror ApprovalCallerNotOwnerNorApproved();\\nerror ApprovalQueryForNonexistentToken();\\nerror ApproveToCaller();\\nerror ApprovalToCurrentOwner();\\nerror BalanceQueryForZeroAddress();\\nerror MintedQueryForZeroAddress();\\nerror BurnedQueryForZeroAddress();\\nerror MintToZeroAddress();\\nerror MintZeroQuantity();\\nerror OwnerIndexOutOfBounds();\\nerror OwnerQueryForNonexistentToken();\\nerror TokenIndexOutOfBounds();\\nerror TransferCallerNotOwnerNorApproved();\\nerror TransferFromIncorrectOwner();\\nerror TransferToNonERC721ReceiverImplementer();\\nerror TransferToZeroAddress();\\nerror URIQueryForNonexistentToken();\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata and Enumerable extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at 0 (e.g. 0, 1, 2, 3..).\\n *\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n *\\n * Assumes that the maximum token id cannot exceed 2**128 - 1 (max value of uint128).\\n */\\ncontract ERC721A is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n    }\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct AddressData {\\n        // Realistically, 2**64-1 is more than enough.\\n        uint64 balance;\\n        // Keeps track of mint count with minimal overhead for tokenomics.\\n        uint64 numberMinted;\\n        // Keeps track of burn count with minimal overhead for tokenomics.\\n        uint64 numberBurned;\\n    }\\n\\n    // Compiler will pack the following \\n    // _currentIndex and _burnCounter into a single 256bit word.\\n    \\n    // The tokenId of the next token to be minted.\\n    uint128 internal _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint128 internal _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\\n    mapping(uint256 => TokenOwnership) internal _ownerships;\\n\\n    // Mapping owner address to address data\\n    mapping(address => AddressData) private _addressData;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than _currentIndex times\\n        unchecked {\\n            return _currentIndex - _burnCounter;    \\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     * This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first.\\n     * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\\n     */\\n    function tokenByIndex(uint256 index) public view override returns (uint256) {\\n        uint256 numMintedSoFar = _currentIndex;\\n        uint256 tokenIdsIdx;\\n\\n        // Counter overflow is impossible as the loop breaks when\\n        // uint256 i is equal to another uint256 numMintedSoFar.\\n        unchecked {\\n            for (uint256 i; i < numMintedSoFar; i++) {\\n                TokenOwnership memory ownership = _ownerships[i];\\n                if (!ownership.burned) {\\n                    if (tokenIdsIdx == index) {\\n                        return i;\\n                    }\\n                    tokenIdsIdx++;\\n                }\\n            }\\n        }\\n        revert TokenIndexOutOfBounds();\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     * This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first.\\n     * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {\\n        if (index >= balanceOf(owner)) revert OwnerIndexOutOfBounds();\\n        uint256 numMintedSoFar = _currentIndex;\\n        uint256 tokenIdsIdx;\\n        address currOwnershipAddr;\\n\\n        // Counter overflow is impossible as the loop breaks when\\n        // uint256 i is equal to another uint256 numMintedSoFar.\\n        unchecked {\\n            for (uint256 i; i < numMintedSoFar; i++) {\\n                TokenOwnership memory ownership = _ownerships[i];\\n                if (ownership.burned) {\\n                    continue;\\n                }\\n                if (ownership.addr != address(0)) {\\n                    currOwnershipAddr = ownership.addr;\\n                }\\n                if (currOwnershipAddr == owner) {\\n                    if (tokenIdsIdx == index) {\\n                        return i;\\n                    }\\n                    tokenIdsIdx++;\\n                }\\n            }\\n        }\\n\\n        // Execution should never reach this point.\\n        revert();\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            interfaceId == type(IERC721Enumerable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return uint256(_addressData[owner].balance);\\n    }\\n\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        if (owner == address(0)) revert MintedQueryForZeroAddress();\\n        return uint256(_addressData[owner].numberMinted);\\n    }\\n\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        if (owner == address(0)) revert BurnedQueryForZeroAddress();\\n        return uint256(_addressData[owner].numberBurned);\\n    }\\n\\n    /**\\n     * Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\n     */\\n    function ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (curr < _currentIndex) {\\n                TokenOwnership memory ownership = _ownerships[curr];\\n                if (!ownership.burned) {\\n                    if (ownership.addr != address(0)) {\\n                        return ownership;\\n                    }\\n                    // Invariant: \\n                    // There will always be an ownership that has an address and is not burned \\n                    // before an ownership that does not have an address and is not burned.\\n                    // Hence, curr will not underflow.\\n                    while (true) {\\n                        curr--;\\n                        ownership = _ownerships[curr];\\n                        if (ownership.addr != address(0)) {\\n                            return ownership;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return ownershipOf(tokenId).addr;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public override {\\n        address owner = ERC721A.ownerOf(tokenId);\\n        if (to == owner) revert ApprovalToCurrentOwner();\\n\\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\\n            revert ApprovalCallerNotOwnerNorApproved();\\n        }\\n\\n        _approve(to, tokenId, owner);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public override {\\n        if (operator == _msgSender()) revert ApproveToCaller();\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n        if (!_checkOnERC721Received(from, to, tokenId, _data)) {\\n            revert TransferToNonERC721ReceiverImplementer();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return tokenId < _currentIndex && !_ownerships[tokenId].burned;\\n    }\\n\\n    function _safeMint(address to, uint256 quantity) internal {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal {\\n        _mint(to, quantity, _data, true);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data,\\n        bool safe\\n    ) internal {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 3.4e38 (2**128) - 1\\n        // updatedIndex overflows if _currentIndex + quantity > 3.4e38 (2**128) - 1\\n        unchecked {\\n            _addressData[to].balance += uint64(quantity);\\n            _addressData[to].numberMinted += uint64(quantity);\\n\\n            _ownerships[startTokenId].addr = to;\\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\n\\n            uint256 updatedIndex = startTokenId;\\n\\n            for (uint256 i; i < quantity; i++) {\\n                emit Transfer(address(0), to, updatedIndex);\\n                if (safe && !_checkOnERC721Received(address(0), to, updatedIndex, _data)) {\\n                    revert TransferToNonERC721ReceiverImplementer();\\n                }\\n                updatedIndex++;\\n            }\\n\\n            _currentIndex = uint128(updatedIndex);\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) private {\\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\\n\\n        bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\\n            isApprovedForAll(prevOwnership.addr, _msgSender()) ||\\n            getApproved(tokenId) == _msgSender());\\n\\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, prevOwnership.addr);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**128.\\n        unchecked {\\n            _addressData[from].balance -= 1;\\n            _addressData[to].balance += 1;\\n\\n            _ownerships[tokenId].addr = to;\\n            _ownerships[tokenId].startTimestamp = uint64(block.timestamp);\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            if (_ownerships[nextTokenId].addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId < _currentIndex) {\\n                    _ownerships[nextTokenId].addr = prevOwnership.addr;\\n                    _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\\n\\n        _beforeTokenTransfers(prevOwnership.addr, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, prevOwnership.addr);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**128.\\n        unchecked {\\n            _addressData[prevOwnership.addr].balance -= 1;\\n            _addressData[prevOwnership.addr].numberBurned += 1;\\n\\n            // Keep track of who burned the token, and the timestamp of burning.\\n            _ownerships[tokenId].addr = prevOwnership.addr;\\n            _ownerships[tokenId].startTimestamp = uint64(block.timestamp);\\n            _ownerships[tokenId].burned = true;\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            if (_ownerships[nextTokenId].addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId < _currentIndex) {\\n                    _ownerships[nextTokenId].addr = prevOwnership.addr;\\n                    _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(prevOwnership.addr, address(0), tokenId);\\n        _afterTokenTransfers(prevOwnership.addr, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked { \\n            _burnCounter++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(\\n        address to,\\n        uint256 tokenId,\\n        address owner\\n    ) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert TransferToNonERC721ReceiverImplementer();\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n     * minting.\\n     * And also called after one token has been burned.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xfae1341d343abce757109fbff0e9fa7d90de54eecb7fe1d983e0d206e0c62ece\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200378538038062003785833981016040819052620000349162000696565b8651879087906200004d90600190602085019062000282565b5080516200006390600290602084019062000282565b505050620000806200007a6200019160201b60201c565b62000195565b60016008556200009085620001e7565b60005b84518110156200015f57838181518110620000b257620000b2620007ba565b602002602001015160bd6000878481518110620000d357620000d3620007ba565b6020908102919091018101516001600160a01b031682528181019290925260409081016000208351815493850151949092015160ff16600160901b0260ff60901b1961ffff909516600160801b026001600160901b03199094166001600160801b03909316929092179290921792909216919091179055806200015681620007e6565b91505062000093565b5060bc91909155600980546001600160a01b0319166001600160a01b0390921691909117905550620008a79350505050565b3390565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6007546001600160a01b031633146200021d5760405162461bcd60e51b8152600401620002149062000804565b60405180910390fd5b60c180546001600160a01b0383166001600160a01b0319918216811790925560c28054909116821790556040517fa00632ff71f043bcebbaa26952d3fd31a42e459b0dc8b686a91eb77725ee668091620002779162000850565b60405180910390a150565b828054620002909062000876565b90600052602060002090601f016020900481019282620002b45760008555620002ff565b82601f10620002cf57805160ff1916838001178555620002ff565b82800160010185558215620002ff579182015b82811115620002ff578251825591602001919060010190620002e2565b506200030d92915062000311565b5090565b5b808211156200030d576000815560010162000312565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681016001600160401b038111828210171562000366576200036662000328565b6040525050565b60006200037960405190565b90506200038782826200033e565b919050565b60006001600160401b03821115620003a857620003a862000328565b601f19601f83011660200192915050565b60005b83811015620003d6578181015183820152602001620003bc565b83811115620003e6576000848401525b50505050565b600062000403620003fd846200038c565b6200036d565b905082815260208101848484011115620004205762000420600080fd5b6200042d848285620003b9565b509392505050565b600082601f8301126200044b576200044b600080fd5b81516200045d848260208601620003ec565b949350505050565b60006001600160a01b0382165b92915050565b620004838162000465565b81146200048f57600080fd5b50565b8051620004728162000478565b60006001600160401b03821115620004bb57620004bb62000328565b5060209081020190565b6000620004d6620003fd846200049f565b83815290506020808201908402830185811115620004f757620004f7600080fd5b835b818110156200051d576200050e878262000492565b835260209283019201620004f9565b5050509392505050565b600082601f8301126200053d576200053d600080fd5b81516200045d848260208601620004c5565b6001600160801b03811662000483565b805162000472816200054f565b61ffff811662000483565b805162000472816200056c565b60ff811662000483565b8051620004728162000584565b600060608284031215620005b257620005b2600080fd5b620005be60606200036d565b90506000620005ce84846200055f565b908201526020620005e28484830162000577565b908201526040620005f6848483016200058e565b9082015292915050565b600062000611620003fd846200049f565b83815290506020810160608402830185811115620006325762000632600080fd5b835b818110156200051d576200064987826200059b565b835260209092019160600162000634565b600082601f830112620006705762000670600080fd5b81516200045d84826020860162000600565b8062000483565b8051620004728162000682565b600080600080600080600060e0888a031215620006b657620006b6600080fd5b87516001600160401b03811115620006d157620006d1600080fd5b620006df8a828b0162000435565b60208a015190985090506001600160401b03811115620007025762000702600080fd5b620007108a828b0162000435565b9650506040620007238a828b0162000492565b60608a015190965090506001600160401b03811115620007465762000746600080fd5b620007548a828b0162000527565b60808a015190955090506001600160401b03811115620007775762000777600080fd5b620007858a828b016200065a565b93505060a0620007988a828b0162000689565b92505060c0620007ab8a828b0162000492565b91505092959891949750929550565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415620007fd57620007fd620007d0565b5060010190565b60208082528181019081527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408301526060820162000472565b6200084a8162000465565b82525050565b602081016200047282846200083f565b634e487b7160e01b600052602260045260246000fd5b6002810460018216806200088b57607f821691505b60208210811415620008a157620008a162000860565b50919050565b612ece80620008b76000396000f3fe6080604052600436106102ca5760003560e01c806395d89b4111610179578063c0c9c735116100d6578063de6746a51161008a578063f140a90011610064578063f140a90014610812578063f2fde38b14610825578063f95ed2f51461084557600080fd5b8063de6746a514610730578063e632751a146107a9578063e985e9c5146107c957600080fd5b8063d7822c99116100bb578063d7822c99146106da578063dcf7eefe146106f0578063dd6c6cef1461071057600080fd5b8063c0c9c735146106a5578063c87b56dd146106ba57600080fd5b8063af0097251161012d578063b6cfb24211610112578063b6cfb24214610638578063b88d4fde14610665578063c074f4121461068557600080fd5b8063af00972514610603578063b585209b1461062357600080fd5b80639c51792a1161015e5780639c51792a146105b2578063a22cb465146105cd578063ac156e9b146105ed57600080fd5b806395d89b411461058857806399c0731b1461059d57600080fd5b80633189a5341161022757806353557e25116101db57806370a08231116101c057806370a0823114610535578063715018a6146105555780638da5cb5b1461056a57600080fd5b806353557e25146104f25780636352211e1461051557600080fd5b80634bd3f52f1161020c5780634bd3f52f1461049d5780634f558e79146104b25780634f6ccce7146104d257600080fd5b80633189a5341461045057806342842e0e1461047d57600080fd5b806318160ddd1161027e5780631a6949e3116102635780631a6949e3146103fb57806323b872dd146104105780632f745c591461043057600080fd5b806318160ddd1461039d578063191694f8146103e657600080fd5b8063081812fc116102af578063081812fc1461032e578063095ea7b31461035b57806312b40a9f1461037d57600080fd5b806301ffc9a7146102d657806306fdde031461030c57600080fd5b366102d157005b600080fd5b3480156102e257600080fd5b506102f66102f13660046124f3565b610865565b604051610303919061251e565b60405180910390f35b34801561031857600080fd5b50610321610936565b604051610303919061258a565b34801561033a57600080fd5b5061034e6103493660046125b3565b6109c8565b60405161030391906125ee565b34801561036757600080fd5b5061037b610376366004612610565b610a25565b005b34801561038957600080fd5b5061037b61039836600461264d565b610ae5565b3480156103a957600080fd5b506103d96000546001600160801b0370010000000000000000000000000000000082048116918116919091031690565b6040516103039190612674565b3480156103f257600080fd5b506102f6610b88565b34801561040757600080fd5b506102f6610d3c565b34801561041c57600080fd5b5061037b61042b366004612682565b610d55565b34801561043c57600080fd5b506103d961044b366004612610565b610d60565b34801561045c57600080fd5b5061047061046b3660046125b3565b610e76565b60405161030391906126db565b34801561048957600080fd5b5061037b610498366004612682565b610eaa565b3480156104a957600080fd5b506102f6610ec5565b3480156104be57600080fd5b506102f66104cd3660046125b3565b6110b4565b3480156104de57600080fd5b506103d96104ed3660046125b3565b6110bf565b3480156104fe57600080fd5b506105086115e081565b60405161030391906126f3565b34801561052157600080fd5b5061034e6105303660046125b3565b611183565b34801561054157600080fd5b506103d961055036600461264d565b611195565b34801561056157600080fd5b5061037b6111fd565b34801561057657600080fd5b506007546001600160a01b031661034e565b34801561059457600080fd5b50610321611233565b3480156105a957600080fd5b50610470606481565b3480156105be57600080fd5b506103d966c6f3b40b6c000081565b3480156105d957600080fd5b5061037b6105e8366004612714565b611242565b3480156105f957600080fd5b506103d960bc5481565b34801561060f57600080fd5b506102f661061e3660046125b3565b611312565b34801561062f57600080fd5b5061037b61133d565b34801561064457600080fd5b50600954610658906001600160a01b031681565b6040516103039190612789565b34801561067157600080fd5b5061037b610680366004612892565b6113e4565b34801561069157600080fd5b5060c15461034e906001600160a01b031681565b3480156106b157600080fd5b50610470603881565b3480156106c657600080fd5b506103216106d53660046125b3565b61141e565b3480156106e657600080fd5b506103d960c05481565b3480156106fc57600080fd5b5061047061070b3660046125b3565b611596565b34801561071c57600080fd5b5061037b61072b366004612963565b6115a6565b34801561073c57600080fd5b5061079a61074b36600461264d565b60bd602052600090815260409020546001600160801b03811690700100000000000000000000000000000000810461ffff16907201000000000000000000000000000000000000900460ff1683565b60405161030393929190612a1f565b3480156107b557600080fd5b506103216107c4366004612a5b565b6116e8565b3480156107d557600080fd5b506102f66107e4366004612a8e565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b61037b610820366004612963565b6117ca565b34801561083157600080fd5b5061037b61084036600461264d565b6118f7565b34801561085157600080fd5b506104706108603660046125b3565b611953565b60006001600160e01b031982167f80ac58cd0000000000000000000000000000000000000000000000000000000014806108c857506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806108fc57506001600160e01b031982167f780e9d6300000000000000000000000000000000000000000000000000000000145b8061093057507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b60606001805461094590612ad7565b80601f016020809104026020016040519081016040528092919081815260200182805461097190612ad7565b80156109be5780601f10610993576101008083540402835291602001916109be565b820191906000526020600020905b8154815290600101906020018083116109a157829003601f168201915b5050505050905090565b60006109d382611963565b610a09576040517fcf4700e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b506000908152600560205260409020546001600160a01b031690565b6000610a3082611183565b9050806001600160a01b0316836001600160a01b03161415610a7e576040517f943f7b8c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336001600160a01b03821614801590610a9e5750610a9c81336107e4565b155b15610ad5576040517fcfb3b94200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610ae0838383611997565b505050565b6007546001600160a01b03163314610b185760405162461bcd60e51b8152600401610b0f90612b36565b60405180910390fd5b60c180546001600160a01b03831673ffffffffffffffffffffffffffffffffffffffff19918216811790925560c28054909116821790556040517fa00632ff71f043bcebbaa26952d3fd31a42e459b0dc8b686a91eb77725ee668091610b7d916125ee565b60405180910390a150565b600060026008541415610bad5760405162461bcd60e51b8152600401610b0f90612b78565b600260085533600090815260be602052604090205461ffff16610bfc576040517fd0d04f6000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60bc5433600090815260be602052604081205490916115e091610c2a9061ffff1666c6f3b40b6c0000612b9e565b610c349190612b9e565b610c3e9190612bd3565b604051909150600090339083908381818185875af1925050503d8060008114610c83576040519150601f19603f3d011682016040523d82523d6000602084013e610c88565b606091505b5050905080610cc3576040517f27fcd9d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f481f0c31fede089900c9fd5b1bd26054cf3d6e31a09d068df5b323a0265211e53383604051610cf4929190612be7565b60405180910390a133600090815260be6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000169055600160085592915050565b600060c05442118015610d50575060c05415155b905090565b610ae0838383611a00565b6000610d6b83611195565b8210610da3576040517f0ddac30e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080546001600160801b03169080805b83811015610e7057600081815260036020908152604091829020825160608101845290546001600160a01b0381168252600160a01b810467ffffffffffffffff1692820192909252600160e01b90910460ff161580159282019290925290610e1c5750610e68565b80516001600160a01b031615610e3157805192505b876001600160a01b0316836001600160a01b03161415610e665786841415610e5f5750935061093092505050565b6001909301925b505b600101610db4565b50600080fd5b60b98181548110610e8657600080fd5b9060005260206000209060209182820401919006915054906101000a900460ff1681565b610ae0838383604051806020016040528060008152506113e4565b600060026008541415610eea5760405162461bcd60e51b8152600401610b0f90612b78565b600260085533600090815260bd602052604081205460bf546001600160801b038216916115e091610f3391700100000000000000000000000000000000900461ffff1690612b9e565b610f3d9190612bd3565b610f479190612c02565b905080610f80576040517fd0d04f6000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610f916001600160801b0382612c1d565b33600090815260bd602052604081208054909190610fb99084906001600160801b0316612c31565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506000610fe63390565b6001600160a01b03168260405160006040518083038185875af1925050503d8060008114611030576040519150601f19603f3d011682016040523d82523d6000602084013e611035565b606091505b5050905080611070576040517f27fcd9d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f47521fa5fb7651fe9fbc44eddef019766bd46d393ffcd1c5e1338cce9bd35cf933836040516110a1929190612be7565b60405180910390a1915050600160085590565b600061093082611963565b600080546001600160801b031681805b8281101561115057600081815260036020908152604091829020825160608101845290546001600160a01b0381168252600160a01b810467ffffffffffffffff1692820192909252600160e01b90910460ff1615159181018290529061114757858314156111405750949350505050565b6001909201915b506001016110cf565b506040517fa723001c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061118e82611c6b565b5192915050565b60006001600160a01b0382166111d7576040517f8f4eb60400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b506001600160a01b031660009081526004602052604090205467ffffffffffffffff1690565b6007546001600160a01b031633146112275760405162461bcd60e51b8152600401610b0f90612b36565b6112316000611da8565b565b60606002805461094590612ad7565b6001600160a01b038216331415611285576040517fb06307db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360008181526006602090815260408083206001600160a01b03871680855292529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151517905590519091907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319061130690859061251e565b60405180910390a35050565b600a816115e0811061132357600080fd5b60209182820401919006915054906101000a900460ff1681565b6007546001600160a01b031633146113675760405162461bcd60e51b8152600401610b0f90612b36565b61136f610d3c565b156113a6576040517f63a2de0f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b4260c08190556040517fe1edf9fc3dd1a3a3cb6d462dc065c574fb31cc577afdfba34c247d258db7f0b5916113da91612674565b60405180910390a1565b6113ef848484611a00565b6113fb84848484611e07565b611418576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b606061142982611963565b61145f576040517fa14c4b5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60c1546001600160a01b031661148357505060408051602081019091526000815290565b60c25460b980546001600160a01b039092169163bd1798f69190859081106114ad576114ad612c69565b90600052602060002090602091828204019190069054906101000a900460ff1660ba85815481106114e0576114e0612c69565b90600052602060002090602091828204019190069054906101000a900460ff1660bb868154811061151357611513612c69565b90600052602060002090602091828204019190069054906101000a900460ff166040518463ffffffff1660e01b815260040161155193929190612c97565b600060405180830381865afa15801561156e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109309190810190612d0a565b60bb8181548110610e8657600080fd5b600260085414156115c95760405162461bcd60e51b8152600401610b0f90612b78565b6002600855848314611607576040517f9c38699e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33600090815260bd60205260409020547201000000000000000000000000000000000000900460ff16851115611669576040517f74a5d1f500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61167460ff86612c1d565b33600090815260bd6020526040902080546012906116ac9084907201000000000000000000000000000000000000900460ff16612d45565b92506101000a81548160ff021916908360ff1602179055506116db6116ce3390565b8787878787876000611f39565b5050600160085550505050565b606060005b60b954811015611797578360ff1660b9828154811061170e5761170e612c69565b60009182526020918290209181049091015460ff601f9092166101000a90041614801561176f57508260ff1660ba828154811061174d5761174d612c69565b60009182526020918290209181049091015460ff601f9092166101000a900416145b156117855761177d8161141e565b915050610930565b8061178f81612d52565b9150506116ed565b506040517ff09c6c1300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6117d2610d3c565b611808576040517f63a2de0f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600854141561182b5760405162461bcd60e51b8152600401610b0f90612b78565b6002600855848314611869576040517f9c38699e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61187a8566c6f3b40b6c0000612b9e565b34146118b2576040517f99b5cb1d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6118c3338787878787876001611f39565b6118d48566c6f3b40b6c0000612b9e565b60bf60008282546118e59190612d6d565b90915550506001600855505050505050565b6007546001600160a01b031633146119215760405162461bcd60e51b8152600401610b0f90612b36565b6001600160a01b0381166119475760405162461bcd60e51b8152600401610b0f90612d80565b61195081611da8565b50565b60ba8181548110610e8657600080fd5b600080546001600160801b031682108015610930575050600090815260036020526040902054600160e01b900460ff161590565b600082815260056020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6000611a0b82611c6b565b80519091506000906001600160a01b0316336001600160a01b03161480611a3957508151611a3990336107e4565b80611a54575033611a49846109c8565b6001600160a01b0316145b905080611a8d576040517f59c896be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b846001600160a01b031682600001516001600160a01b031614611adc576040517fa114810000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038416611b1c576040517fea553b3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611b2c6000848460000151611997565b6001600160a01b038581166000908152600460209081526040808320805467ffffffffffffffff1980821667ffffffffffffffff92831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652600390945282852080546001600160e01b031916909417600160a01b429092169190910217909255908601808352912054909116611c21576000546001600160801b0316811015611c21578251600082815260036020908152604090912080549186015167ffffffffffffffff16600160a01b026001600160e01b03199092166001600160a01b03909316929092171790555b5082846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b5050505050565b60408051606081018252600080825260208201819052918101829052905482906001600160801b0316811015611d7657600081815260036020908152604091829020825160608101845290546001600160a01b0381168252600160a01b810467ffffffffffffffff1692820192909252600160e01b90910460ff16151591810182905290611d745780516001600160a01b031615611d0a579392505050565b5060001901600081815260036020908152604091829020825160608101845290546001600160a01b038116808352600160a01b820467ffffffffffffffff1693830193909352600160e01b900460ff1615159281019290925215611d6f579392505050565b611d0a565b505b6040517fdf2d9b4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600780546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006001600160a01b0384163b15611f2d576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a0290611e64903390899088908890600401612de1565b6020604051808303816000875af1925050508015611e9f575060408051601f3d908101601f19168201909252611e9c91810190612e30565b60015b611efa573d808015611ecd576040519150601f19603f3d011682016040523d82523d6000602084013e611ed2565b606091505b508051611ef2576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b0319167f150b7a0200000000000000000000000000000000000000000000000000000000149050611f31565b5060015b949350505050565b60005b868110156122aa576000888883818110611f5857611f58612c69565b9050602002013590506000878784818110611f7557611f75612c69565b60200291909101359150600a905081611f8f606485612b9e565b611f999190612d6d565b6115e08110611faa57611faa612c69565b602081049091015460ff601f9092166101000a90041615611ff7576040517f81d9ae2500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61200360016038612d45565b60ff1682111561203f576040517fd9c0f1d300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61204b60016064612d45565b60ff16811115612087576040517f1f81f00900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60b961209460ff84612c1d565b815460018101835560009283526020928390209281049092018054601f9093166101000a60ff818102199094169284160291909117905560ba906120d89083612c1d565b815460018101835560009283526020928390209281049092018054601f9093166101000a60ff818102199094169284160291909117905560bb9087878681811061212457612124612c69565b905060200201356121359190612c1d565b8154600181810184556000938452602093849020938204909301805460ff938416601f9093166101000a9283029390920219909116919091179055600a8261217e606486612b9e565b6121889190612d6d565b6115e0811061219957612199612c69565b602091828204019190066101000a81548160ff0219169083151502179055508315612295576009546040517f06daaebd00000000000000000000000000000000000000000000000000000000815260be916000916001600160a01b03909116906306daaebd9061220d908690600401612674565b602060405180830381865afa15801561222a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224e9190612e5c565b6001600160a01b0316815260208101919091526040016000908120805461ffff169161227983612e7d565b91906101000a81548161ffff021916908361ffff160217905550505b505080806122a290612d52565b915050611f3c565b506122b588876122bf565b5050505050505050565b6122d98282604051806020016040528060008152506122dd565b5050565b610ae083838360016000546001600160801b03166001600160a01b038516612331576040517f2e07630000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83612368576040517fb562e8dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038516600081815260046020908152604080832080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000811667ffffffffffffffff8083168c0181169182176801000000000000000067ffffffffffffffff1990941690921783900481168c018116909202179091558584526003909252822080546001600160e01b031916909317600160a01b42909216919091021790915581905b858110156124935760405182906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a483801561246957506124676000888488611e07565b155b15612487576040516368d2bf6b60e11b815260040160405180910390fd5b60019182019101612412565b50600080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166001600160801b0392909216919091179055611c64565b6001600160e01b031981165b811461195057600080fd5b8035610930816124d1565b60006020828403121561250857612508600080fd5b6000611f3184846124e8565b8015155b82525050565b602081016109308284612514565b60005b8381101561254757818101518382015260200161252f565b838111156114185750506000910152565b6000612562825190565b80845260208401935061257981856020860161252c565b601f01601f19169290920192915050565b6020808252810161259b8184612558565b9392505050565b806124dd565b8035610930816125a2565b6000602082840312156125c8576125c8600080fd5b6000611f3184846125a8565b60006001600160a01b038216610930565b612518816125d4565b6020810161093082846125e5565b6124dd816125d4565b8035610930816125fc565b6000806040838503121561262657612626600080fd5b60006126328585612605565b9250506020612643858286016125a8565b9150509250929050565b60006020828403121561266257612662600080fd5b6000611f318484612605565b80612518565b60208101610930828461266e565b60008060006060848603121561269a5761269a600080fd5b60006126a68686612605565b93505060206126b786828701612605565b92505060406126c8868287016125a8565b9150509250925092565b60ff8116612518565b6020810161093082846126d2565b61ffff8116612518565b6020810161093082846126e9565b8015156124dd565b803561093081612701565b6000806040838503121561272a5761272a600080fd5b60006127368585612605565b925050602061264385828601612709565b60006109306001600160a01b03831661275e565b90565b6001600160a01b031690565b600061093082612747565b60006109308261276a565b61251881612775565b602081016109308284612780565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff821117156127d3576127d3612797565b6040525050565b60006127e560405190565b90506127f182826127ad565b919050565b600067ffffffffffffffff82111561281057612810612797565b601f19601f83011660200192915050565b82818337506000910152565b600061284061283b846127f6565b6127da565b90508281526020810184848401111561285b5761285b600080fd5b612866848285612821565b509392505050565b600082601f83011261288257612882600080fd5b8135611f3184826020860161282d565b600080600080608085870312156128ab576128ab600080fd5b60006128b78787612605565b94505060206128c887828801612605565b93505060406128d9878288016125a8565b925050606085013567ffffffffffffffff8111156128f9576128f9600080fd5b6129058782880161286e565b91505092959194509250565b60008083601f84011261292657612926600080fd5b50813567ffffffffffffffff81111561294157612941600080fd5b60208301915083602082028301111561295c5761295c600080fd5b9250929050565b6000806000806000806060878903121561297f5761297f600080fd5b863567ffffffffffffffff81111561299957612999600080fd5b6129a589828a01612911565b9650965050602087013567ffffffffffffffff8111156129c7576129c7600080fd5b6129d389828a01612911565b9450945050604087013567ffffffffffffffff8111156129f5576129f5600080fd5b612a0189828a01612911565b92509250509295509295509295565b6001600160801b038116612518565b60608101612a2d8286612a10565b612a3a60208301856126e9565b611f3160408301846126d2565b60ff81166124dd565b803561093081612a47565b60008060408385031215612a7157612a71600080fd5b6000612a7d8585612a50565b925050602061264385828601612a50565b60008060408385031215612aa457612aa4600080fd5b6000612ab08585612605565b925050602061264385828601612605565b634e487b7160e01b600052602260045260246000fd5b600281046001821680612aeb57607f821691505b60208210811415612afe57612afe612ac1565b50919050565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081525b60200190565b6020808252810161093081612b04565b601f8152602081017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081529050612b30565b6020808252810161093081612b46565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615612bb857612bb8612b88565b500290565b634e487b7160e01b600052601260045260246000fd5b600082612be257612be2612bbd565b500490565b60408101612bf582856125e5565b61259b602083018461266e565b815b9150600082821015612c1857612c18612b88565b500390565b600082612c2c57612c2c612bbd565b500690565b6001600160801b03811690506001600160801b03821691506000826001600160801b0303821115612c6457612c64612b88565b500190565b634e487b7160e01b600052603260045260246000fd5b600061093061275b60ff841681565b61251881612c7f565b60608101612ca58286612c8e565b612a3a6020830185612c8e565b6000612cc061283b846127f6565b905082815260208101848484011115612cdb57612cdb600080fd5b61286684828561252c565b600082601f830112612cfa57612cfa600080fd5b8151611f31848260208601612cb2565b600060208284031215612d1f57612d1f600080fd5b815167ffffffffffffffff811115612d3957612d39600080fd5b611f3184828501612ce6565b60ff908116908216612c04565b6000600019821415612d6657612d66612b88565b5060010190565b60008219821115612c6457612c64612b88565b6020808252810161093081602681527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160208201527f6464726573730000000000000000000000000000000000000000000000000000604082015260600190565b60808101612def82876125e5565b612dfc60208301866125e5565b612e09604083018561266e565b8181036060830152612e1b8184612558565b9695505050505050565b8051610930816124d1565b600060208284031215612e4557612e45600080fd5b6000611f318484612e25565b8051610930816125fc565b600060208284031215612e7157612e71600080fd5b6000611f318484612e51565b61ffff81169050600061ffff821415612d6657612d66612b8856fea2646970667358221220bf6d5c803e1a8352b13048e507cbeccc384bcf7ccc082cae87b0d59b34546a3664736f6c634300080c0033",
  "deployedBytecode": "0x6080604052600436106102ca5760003560e01c806395d89b4111610179578063c0c9c735116100d6578063de6746a51161008a578063f140a90011610064578063f140a90014610812578063f2fde38b14610825578063f95ed2f51461084557600080fd5b8063de6746a514610730578063e632751a146107a9578063e985e9c5146107c957600080fd5b8063d7822c99116100bb578063d7822c99146106da578063dcf7eefe146106f0578063dd6c6cef1461071057600080fd5b8063c0c9c735146106a5578063c87b56dd146106ba57600080fd5b8063af0097251161012d578063b6cfb24211610112578063b6cfb24214610638578063b88d4fde14610665578063c074f4121461068557600080fd5b8063af00972514610603578063b585209b1461062357600080fd5b80639c51792a1161015e5780639c51792a146105b2578063a22cb465146105cd578063ac156e9b146105ed57600080fd5b806395d89b411461058857806399c0731b1461059d57600080fd5b80633189a5341161022757806353557e25116101db57806370a08231116101c057806370a0823114610535578063715018a6146105555780638da5cb5b1461056a57600080fd5b806353557e25146104f25780636352211e1461051557600080fd5b80634bd3f52f1161020c5780634bd3f52f1461049d5780634f558e79146104b25780634f6ccce7146104d257600080fd5b80633189a5341461045057806342842e0e1461047d57600080fd5b806318160ddd1161027e5780631a6949e3116102635780631a6949e3146103fb57806323b872dd146104105780632f745c591461043057600080fd5b806318160ddd1461039d578063191694f8146103e657600080fd5b8063081812fc116102af578063081812fc1461032e578063095ea7b31461035b57806312b40a9f1461037d57600080fd5b806301ffc9a7146102d657806306fdde031461030c57600080fd5b366102d157005b600080fd5b3480156102e257600080fd5b506102f66102f13660046124f3565b610865565b604051610303919061251e565b60405180910390f35b34801561031857600080fd5b50610321610936565b604051610303919061258a565b34801561033a57600080fd5b5061034e6103493660046125b3565b6109c8565b60405161030391906125ee565b34801561036757600080fd5b5061037b610376366004612610565b610a25565b005b34801561038957600080fd5b5061037b61039836600461264d565b610ae5565b3480156103a957600080fd5b506103d96000546001600160801b0370010000000000000000000000000000000082048116918116919091031690565b6040516103039190612674565b3480156103f257600080fd5b506102f6610b88565b34801561040757600080fd5b506102f6610d3c565b34801561041c57600080fd5b5061037b61042b366004612682565b610d55565b34801561043c57600080fd5b506103d961044b366004612610565b610d60565b34801561045c57600080fd5b5061047061046b3660046125b3565b610e76565b60405161030391906126db565b34801561048957600080fd5b5061037b610498366004612682565b610eaa565b3480156104a957600080fd5b506102f6610ec5565b3480156104be57600080fd5b506102f66104cd3660046125b3565b6110b4565b3480156104de57600080fd5b506103d96104ed3660046125b3565b6110bf565b3480156104fe57600080fd5b506105086115e081565b60405161030391906126f3565b34801561052157600080fd5b5061034e6105303660046125b3565b611183565b34801561054157600080fd5b506103d961055036600461264d565b611195565b34801561056157600080fd5b5061037b6111fd565b34801561057657600080fd5b506007546001600160a01b031661034e565b34801561059457600080fd5b50610321611233565b3480156105a957600080fd5b50610470606481565b3480156105be57600080fd5b506103d966c6f3b40b6c000081565b3480156105d957600080fd5b5061037b6105e8366004612714565b611242565b3480156105f957600080fd5b506103d960bc5481565b34801561060f57600080fd5b506102f661061e3660046125b3565b611312565b34801561062f57600080fd5b5061037b61133d565b34801561064457600080fd5b50600954610658906001600160a01b031681565b6040516103039190612789565b34801561067157600080fd5b5061037b610680366004612892565b6113e4565b34801561069157600080fd5b5060c15461034e906001600160a01b031681565b3480156106b157600080fd5b50610470603881565b3480156106c657600080fd5b506103216106d53660046125b3565b61141e565b3480156106e657600080fd5b506103d960c05481565b3480156106fc57600080fd5b5061047061070b3660046125b3565b611596565b34801561071c57600080fd5b5061037b61072b366004612963565b6115a6565b34801561073c57600080fd5b5061079a61074b36600461264d565b60bd602052600090815260409020546001600160801b03811690700100000000000000000000000000000000810461ffff16907201000000000000000000000000000000000000900460ff1683565b60405161030393929190612a1f565b3480156107b557600080fd5b506103216107c4366004612a5b565b6116e8565b3480156107d557600080fd5b506102f66107e4366004612a8e565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b61037b610820366004612963565b6117ca565b34801561083157600080fd5b5061037b61084036600461264d565b6118f7565b34801561085157600080fd5b506104706108603660046125b3565b611953565b60006001600160e01b031982167f80ac58cd0000000000000000000000000000000000000000000000000000000014806108c857506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806108fc57506001600160e01b031982167f780e9d6300000000000000000000000000000000000000000000000000000000145b8061093057507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b60606001805461094590612ad7565b80601f016020809104026020016040519081016040528092919081815260200182805461097190612ad7565b80156109be5780601f10610993576101008083540402835291602001916109be565b820191906000526020600020905b8154815290600101906020018083116109a157829003601f168201915b5050505050905090565b60006109d382611963565b610a09576040517fcf4700e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b506000908152600560205260409020546001600160a01b031690565b6000610a3082611183565b9050806001600160a01b0316836001600160a01b03161415610a7e576040517f943f7b8c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336001600160a01b03821614801590610a9e5750610a9c81336107e4565b155b15610ad5576040517fcfb3b94200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610ae0838383611997565b505050565b6007546001600160a01b03163314610b185760405162461bcd60e51b8152600401610b0f90612b36565b60405180910390fd5b60c180546001600160a01b03831673ffffffffffffffffffffffffffffffffffffffff19918216811790925560c28054909116821790556040517fa00632ff71f043bcebbaa26952d3fd31a42e459b0dc8b686a91eb77725ee668091610b7d916125ee565b60405180910390a150565b600060026008541415610bad5760405162461bcd60e51b8152600401610b0f90612b78565b600260085533600090815260be602052604090205461ffff16610bfc576040517fd0d04f6000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60bc5433600090815260be602052604081205490916115e091610c2a9061ffff1666c6f3b40b6c0000612b9e565b610c349190612b9e565b610c3e9190612bd3565b604051909150600090339083908381818185875af1925050503d8060008114610c83576040519150601f19603f3d011682016040523d82523d6000602084013e610c88565b606091505b5050905080610cc3576040517f27fcd9d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f481f0c31fede089900c9fd5b1bd26054cf3d6e31a09d068df5b323a0265211e53383604051610cf4929190612be7565b60405180910390a133600090815260be6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000169055600160085592915050565b600060c05442118015610d50575060c05415155b905090565b610ae0838383611a00565b6000610d6b83611195565b8210610da3576040517f0ddac30e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080546001600160801b03169080805b83811015610e7057600081815260036020908152604091829020825160608101845290546001600160a01b0381168252600160a01b810467ffffffffffffffff1692820192909252600160e01b90910460ff161580159282019290925290610e1c5750610e68565b80516001600160a01b031615610e3157805192505b876001600160a01b0316836001600160a01b03161415610e665786841415610e5f5750935061093092505050565b6001909301925b505b600101610db4565b50600080fd5b60b98181548110610e8657600080fd5b9060005260206000209060209182820401919006915054906101000a900460ff1681565b610ae0838383604051806020016040528060008152506113e4565b600060026008541415610eea5760405162461bcd60e51b8152600401610b0f90612b78565b600260085533600090815260bd602052604081205460bf546001600160801b038216916115e091610f3391700100000000000000000000000000000000900461ffff1690612b9e565b610f3d9190612bd3565b610f479190612c02565b905080610f80576040517fd0d04f6000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610f916001600160801b0382612c1d565b33600090815260bd602052604081208054909190610fb99084906001600160801b0316612c31565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506000610fe63390565b6001600160a01b03168260405160006040518083038185875af1925050503d8060008114611030576040519150601f19603f3d011682016040523d82523d6000602084013e611035565b606091505b5050905080611070576040517f27fcd9d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f47521fa5fb7651fe9fbc44eddef019766bd46d393ffcd1c5e1338cce9bd35cf933836040516110a1929190612be7565b60405180910390a1915050600160085590565b600061093082611963565b600080546001600160801b031681805b8281101561115057600081815260036020908152604091829020825160608101845290546001600160a01b0381168252600160a01b810467ffffffffffffffff1692820192909252600160e01b90910460ff1615159181018290529061114757858314156111405750949350505050565b6001909201915b506001016110cf565b506040517fa723001c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061118e82611c6b565b5192915050565b60006001600160a01b0382166111d7576040517f8f4eb60400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b506001600160a01b031660009081526004602052604090205467ffffffffffffffff1690565b6007546001600160a01b031633146112275760405162461bcd60e51b8152600401610b0f90612b36565b6112316000611da8565b565b60606002805461094590612ad7565b6001600160a01b038216331415611285576040517fb06307db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360008181526006602090815260408083206001600160a01b03871680855292529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151517905590519091907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319061130690859061251e565b60405180910390a35050565b600a816115e0811061132357600080fd5b60209182820401919006915054906101000a900460ff1681565b6007546001600160a01b031633146113675760405162461bcd60e51b8152600401610b0f90612b36565b61136f610d3c565b156113a6576040517f63a2de0f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b4260c08190556040517fe1edf9fc3dd1a3a3cb6d462dc065c574fb31cc577afdfba34c247d258db7f0b5916113da91612674565b60405180910390a1565b6113ef848484611a00565b6113fb84848484611e07565b611418576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b606061142982611963565b61145f576040517fa14c4b5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60c1546001600160a01b031661148357505060408051602081019091526000815290565b60c25460b980546001600160a01b039092169163bd1798f69190859081106114ad576114ad612c69565b90600052602060002090602091828204019190069054906101000a900460ff1660ba85815481106114e0576114e0612c69565b90600052602060002090602091828204019190069054906101000a900460ff1660bb868154811061151357611513612c69565b90600052602060002090602091828204019190069054906101000a900460ff166040518463ffffffff1660e01b815260040161155193929190612c97565b600060405180830381865afa15801561156e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109309190810190612d0a565b60bb8181548110610e8657600080fd5b600260085414156115c95760405162461bcd60e51b8152600401610b0f90612b78565b6002600855848314611607576040517f9c38699e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33600090815260bd60205260409020547201000000000000000000000000000000000000900460ff16851115611669576040517f74a5d1f500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61167460ff86612c1d565b33600090815260bd6020526040902080546012906116ac9084907201000000000000000000000000000000000000900460ff16612d45565b92506101000a81548160ff021916908360ff1602179055506116db6116ce3390565b8787878787876000611f39565b5050600160085550505050565b606060005b60b954811015611797578360ff1660b9828154811061170e5761170e612c69565b60009182526020918290209181049091015460ff601f9092166101000a90041614801561176f57508260ff1660ba828154811061174d5761174d612c69565b60009182526020918290209181049091015460ff601f9092166101000a900416145b156117855761177d8161141e565b915050610930565b8061178f81612d52565b9150506116ed565b506040517ff09c6c1300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6117d2610d3c565b611808576040517f63a2de0f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600854141561182b5760405162461bcd60e51b8152600401610b0f90612b78565b6002600855848314611869576040517f9c38699e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61187a8566c6f3b40b6c0000612b9e565b34146118b2576040517f99b5cb1d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6118c3338787878787876001611f39565b6118d48566c6f3b40b6c0000612b9e565b60bf60008282546118e59190612d6d565b90915550506001600855505050505050565b6007546001600160a01b031633146119215760405162461bcd60e51b8152600401610b0f90612b36565b6001600160a01b0381166119475760405162461bcd60e51b8152600401610b0f90612d80565b61195081611da8565b50565b60ba8181548110610e8657600080fd5b600080546001600160801b031682108015610930575050600090815260036020526040902054600160e01b900460ff161590565b600082815260056020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6000611a0b82611c6b565b80519091506000906001600160a01b0316336001600160a01b03161480611a3957508151611a3990336107e4565b80611a54575033611a49846109c8565b6001600160a01b0316145b905080611a8d576040517f59c896be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b846001600160a01b031682600001516001600160a01b031614611adc576040517fa114810000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038416611b1c576040517fea553b3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611b2c6000848460000151611997565b6001600160a01b038581166000908152600460209081526040808320805467ffffffffffffffff1980821667ffffffffffffffff92831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652600390945282852080546001600160e01b031916909417600160a01b429092169190910217909255908601808352912054909116611c21576000546001600160801b0316811015611c21578251600082815260036020908152604090912080549186015167ffffffffffffffff16600160a01b026001600160e01b03199092166001600160a01b03909316929092171790555b5082846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b5050505050565b60408051606081018252600080825260208201819052918101829052905482906001600160801b0316811015611d7657600081815260036020908152604091829020825160608101845290546001600160a01b0381168252600160a01b810467ffffffffffffffff1692820192909252600160e01b90910460ff16151591810182905290611d745780516001600160a01b031615611d0a579392505050565b5060001901600081815260036020908152604091829020825160608101845290546001600160a01b038116808352600160a01b820467ffffffffffffffff1693830193909352600160e01b900460ff1615159281019290925215611d6f579392505050565b611d0a565b505b6040517fdf2d9b4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600780546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006001600160a01b0384163b15611f2d576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a0290611e64903390899088908890600401612de1565b6020604051808303816000875af1925050508015611e9f575060408051601f3d908101601f19168201909252611e9c91810190612e30565b60015b611efa573d808015611ecd576040519150601f19603f3d011682016040523d82523d6000602084013e611ed2565b606091505b508051611ef2576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b0319167f150b7a0200000000000000000000000000000000000000000000000000000000149050611f31565b5060015b949350505050565b60005b868110156122aa576000888883818110611f5857611f58612c69565b9050602002013590506000878784818110611f7557611f75612c69565b60200291909101359150600a905081611f8f606485612b9e565b611f999190612d6d565b6115e08110611faa57611faa612c69565b602081049091015460ff601f9092166101000a90041615611ff7576040517f81d9ae2500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61200360016038612d45565b60ff1682111561203f576040517fd9c0f1d300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61204b60016064612d45565b60ff16811115612087576040517f1f81f00900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60b961209460ff84612c1d565b815460018101835560009283526020928390209281049092018054601f9093166101000a60ff818102199094169284160291909117905560ba906120d89083612c1d565b815460018101835560009283526020928390209281049092018054601f9093166101000a60ff818102199094169284160291909117905560bb9087878681811061212457612124612c69565b905060200201356121359190612c1d565b8154600181810184556000938452602093849020938204909301805460ff938416601f9093166101000a9283029390920219909116919091179055600a8261217e606486612b9e565b6121889190612d6d565b6115e0811061219957612199612c69565b602091828204019190066101000a81548160ff0219169083151502179055508315612295576009546040517f06daaebd00000000000000000000000000000000000000000000000000000000815260be916000916001600160a01b03909116906306daaebd9061220d908690600401612674565b602060405180830381865afa15801561222a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224e9190612e5c565b6001600160a01b0316815260208101919091526040016000908120805461ffff169161227983612e7d565b91906101000a81548161ffff021916908361ffff160217905550505b505080806122a290612d52565b915050611f3c565b506122b588876122bf565b5050505050505050565b6122d98282604051806020016040528060008152506122dd565b5050565b610ae083838360016000546001600160801b03166001600160a01b038516612331576040517f2e07630000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83612368576040517fb562e8dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038516600081815260046020908152604080832080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000811667ffffffffffffffff8083168c0181169182176801000000000000000067ffffffffffffffff1990941690921783900481168c018116909202179091558584526003909252822080546001600160e01b031916909317600160a01b42909216919091021790915581905b858110156124935760405182906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a483801561246957506124676000888488611e07565b155b15612487576040516368d2bf6b60e11b815260040160405180910390fd5b60019182019101612412565b50600080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166001600160801b0392909216919091179055611c64565b6001600160e01b031981165b811461195057600080fd5b8035610930816124d1565b60006020828403121561250857612508600080fd5b6000611f3184846124e8565b8015155b82525050565b602081016109308284612514565b60005b8381101561254757818101518382015260200161252f565b838111156114185750506000910152565b6000612562825190565b80845260208401935061257981856020860161252c565b601f01601f19169290920192915050565b6020808252810161259b8184612558565b9392505050565b806124dd565b8035610930816125a2565b6000602082840312156125c8576125c8600080fd5b6000611f3184846125a8565b60006001600160a01b038216610930565b612518816125d4565b6020810161093082846125e5565b6124dd816125d4565b8035610930816125fc565b6000806040838503121561262657612626600080fd5b60006126328585612605565b9250506020612643858286016125a8565b9150509250929050565b60006020828403121561266257612662600080fd5b6000611f318484612605565b80612518565b60208101610930828461266e565b60008060006060848603121561269a5761269a600080fd5b60006126a68686612605565b93505060206126b786828701612605565b92505060406126c8868287016125a8565b9150509250925092565b60ff8116612518565b6020810161093082846126d2565b61ffff8116612518565b6020810161093082846126e9565b8015156124dd565b803561093081612701565b6000806040838503121561272a5761272a600080fd5b60006127368585612605565b925050602061264385828601612709565b60006109306001600160a01b03831661275e565b90565b6001600160a01b031690565b600061093082612747565b60006109308261276a565b61251881612775565b602081016109308284612780565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff821117156127d3576127d3612797565b6040525050565b60006127e560405190565b90506127f182826127ad565b919050565b600067ffffffffffffffff82111561281057612810612797565b601f19601f83011660200192915050565b82818337506000910152565b600061284061283b846127f6565b6127da565b90508281526020810184848401111561285b5761285b600080fd5b612866848285612821565b509392505050565b600082601f83011261288257612882600080fd5b8135611f3184826020860161282d565b600080600080608085870312156128ab576128ab600080fd5b60006128b78787612605565b94505060206128c887828801612605565b93505060406128d9878288016125a8565b925050606085013567ffffffffffffffff8111156128f9576128f9600080fd5b6129058782880161286e565b91505092959194509250565b60008083601f84011261292657612926600080fd5b50813567ffffffffffffffff81111561294157612941600080fd5b60208301915083602082028301111561295c5761295c600080fd5b9250929050565b6000806000806000806060878903121561297f5761297f600080fd5b863567ffffffffffffffff81111561299957612999600080fd5b6129a589828a01612911565b9650965050602087013567ffffffffffffffff8111156129c7576129c7600080fd5b6129d389828a01612911565b9450945050604087013567ffffffffffffffff8111156129f5576129f5600080fd5b612a0189828a01612911565b92509250509295509295509295565b6001600160801b038116612518565b60608101612a2d8286612a10565b612a3a60208301856126e9565b611f3160408301846126d2565b60ff81166124dd565b803561093081612a47565b60008060408385031215612a7157612a71600080fd5b6000612a7d8585612a50565b925050602061264385828601612a50565b60008060408385031215612aa457612aa4600080fd5b6000612ab08585612605565b925050602061264385828601612605565b634e487b7160e01b600052602260045260246000fd5b600281046001821680612aeb57607f821691505b60208210811415612afe57612afe612ac1565b50919050565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081525b60200190565b6020808252810161093081612b04565b601f8152602081017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081529050612b30565b6020808252810161093081612b46565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615612bb857612bb8612b88565b500290565b634e487b7160e01b600052601260045260246000fd5b600082612be257612be2612bbd565b500490565b60408101612bf582856125e5565b61259b602083018461266e565b815b9150600082821015612c1857612c18612b88565b500390565b600082612c2c57612c2c612bbd565b500690565b6001600160801b03811690506001600160801b03821691506000826001600160801b0303821115612c6457612c64612b88565b500190565b634e487b7160e01b600052603260045260246000fd5b600061093061275b60ff841681565b61251881612c7f565b60608101612ca58286612c8e565b612a3a6020830185612c8e565b6000612cc061283b846127f6565b905082815260208101848484011115612cdb57612cdb600080fd5b61286684828561252c565b600082601f830112612cfa57612cfa600080fd5b8151611f31848260208601612cb2565b600060208284031215612d1f57612d1f600080fd5b815167ffffffffffffffff811115612d3957612d39600080fd5b611f3184828501612ce6565b60ff908116908216612c04565b6000600019821415612d6657612d66612b88565b5060010190565b60008219821115612c6457612c64612b88565b6020808252810161093081602681527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160208201527f6464726573730000000000000000000000000000000000000000000000000000604082015260600190565b60808101612def82876125e5565b612dfc60208301866125e5565b612e09604083018561266e565b8181036060830152612e1b8184612558565b9695505050505050565b8051610930816124d1565b600060208284031215612e4557612e45600080fd5b6000611f318484612e25565b8051610930816125fc565b600060208284031215612e7157612e71600080fd5b6000611f318484612e51565b61ffff81169050600061ffff821415612d6657612d66612b8856fea2646970667358221220bf6d5c803e1a8352b13048e507cbeccc384bcf7ccc082cae87b0d59b34546a3664736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mintAllocation(uint256[],uint256[],uint256[])": {
        "params": {
          "_blitmapIds": "the list of blitmapIds to use, 0 based indexes. On etherscan, this could be e.g. 99,23,87",
          "_paletteOrders": "the order of the mapping for the blitmap color palette. This uint8 is parsed as 4 uint2        and there are consequently only 24 relevant values, any permutation of 0, 1,  2, 3",
          "_toadzIds": "the list of toadzIds to use, 0 based indexes. On etherscan, this could be e.g. 12,53,1"
        }
      },
      "mintPublicSale(uint256[],uint256[],uint256[])": {
        "params": {
          "_blitmapIds": "the list of blitmapIds to use, 0 based indexes. On etherscan, this could be e.g. 99,23,87",
          "_paletteOrders": "the order of the mapping for the blitmap color palette. This uint8 is parsed as 4 uint2        and there are consequently only 24 relevant values, any permutation of 0, 1,  2, 3",
          "_toadzIds": "the list of toadzIds to use, 0 based indexes. On etherscan, this could be e.g. 12,53,1"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}. This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first. It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}. This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first. It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "mintAllocation(uint256[],uint256[],uint256[])": {
        "notice": "Free mint for addresses with an allocation. Lengths should match; at a given index the combination         toadzId, blitmapId and paletteOrder will be used to define the given blitoadz"
      },
      "mintPublicSale(uint256[],uint256[],uint256[])": {
        "notice": "Free mint for addresses with an allocation. Lengths should match; at a given index the combination         toadzId, blitmapId and paletteOrder will be used to define the given blitoadz"
      },
      "tokenURI(uint8,uint8)": {
        "notice": "Retrieve a tokenURI from the combination toadzId, blitmapId"
      },
      "withdrawBlitmapCreator()": {
        "notice": "Withdraw available funds for blitmap creator"
      },
      "withdrawFounder()": {
        "notice": "Withdraw available funds for blitoadz and toadz creators"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3213,
        "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
        "label": "_currentIndex",
        "offset": 0,
        "slot": "0",
        "type": "t_uint128"
      },
      {
        "astId": 3215,
        "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
        "label": "_burnCounter",
        "offset": 16,
        "slot": "0",
        "type": "t_uint128"
      },
      {
        "astId": 3217,
        "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
        "label": "_name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 3219,
        "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
        "label": "_symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 3224,
        "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
        "label": "_ownerships",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(TokenOwnership)3204_storage)"
      },
      {
        "astId": 3229,
        "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
        "label": "_addressData",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(AddressData)3211_storage)"
      },
      {
        "astId": 3233,
        "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3239,
        "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 225,
        "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
        "label": "_owner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 333,
        "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
        "label": "_status",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1255,
        "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
        "label": "blitmap",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IBlitmap)2839"
      },
      {
        "astId": 1259,
        "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
        "label": "blitoadzExist",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_bool)5600_storage"
      },
      {
        "astId": 1262,
        "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
        "label": "toadzIds",
        "offset": 0,
        "slot": "185",
        "type": "t_array(t_uint8)dyn_storage"
      },
      {
        "astId": 1265,
        "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
        "label": "blitmapIds",
        "offset": 0,
        "slot": "186",
        "type": "t_array(t_uint8)dyn_storage"
      },
      {
        "astId": 1268,
        "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
        "label": "palettes",
        "offset": 0,
        "slot": "187",
        "type": "t_array(t_uint8)dyn_storage"
      },
      {
        "astId": 1270,
        "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
        "label": "blitmapCreatorShares",
        "offset": 0,
        "slot": "188",
        "type": "t_uint256"
      },
      {
        "astId": 1275,
        "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
        "label": "founders",
        "offset": 0,
        "slot": "189",
        "type": "t_mapping(t_address,t_struct(Founder)1288_storage)"
      },
      {
        "astId": 1279,
        "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
        "label": "creatorAvailableAmount",
        "offset": 0,
        "slot": "190",
        "type": "t_mapping(t_address,t_uint16)"
      },
      {
        "astId": 1281,
        "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
        "label": "receivedAmount",
        "offset": 0,
        "slot": "191",
        "type": "t_uint256"
      },
      {
        "astId": 1310,
        "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
        "label": "publicSaleStartTimestamp",
        "offset": 0,
        "slot": "192",
        "type": "t_uint256"
      },
      {
        "astId": 1365,
        "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
        "label": "renderingContractAddress",
        "offset": 0,
        "slot": "193",
        "type": "t_address"
      },
      {
        "astId": 1368,
        "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
        "label": "renderer",
        "offset": 0,
        "slot": "194",
        "type": "t_contract(IBlitoadzRenderer)2853"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bool)5600_storage": {
        "base": "t_bool",
        "encoding": "inplace",
        "label": "bool[5600]",
        "numberOfBytes": "5600"
      },
      "t_array(t_uint8)dyn_storage": {
        "base": "t_uint8",
        "encoding": "dynamic_array",
        "label": "uint8[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBlitmap)2839": {
        "encoding": "inplace",
        "label": "contract IBlitmap",
        "numberOfBytes": "20"
      },
      "t_contract(IBlitoadzRenderer)2853": {
        "encoding": "inplace",
        "label": "contract IBlitoadzRenderer",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(AddressData)3211_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ERC721A.AddressData)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressData)3211_storage"
      },
      "t_mapping(t_address,t_struct(Founder)1288_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Blitoadz.Founder)",
        "numberOfBytes": "32",
        "value": "t_struct(Founder)1288_storage"
      },
      "t_mapping(t_address,t_uint16)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(TokenOwnership)3204_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC721A.TokenOwnership)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenOwnership)3204_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressData)3211_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.AddressData",
        "members": [
          {
            "astId": 3206,
            "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 3208,
            "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
            "label": "numberMinted",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 3210,
            "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
            "label": "numberBurned",
            "offset": 16,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Founder)1288_storage": {
        "encoding": "inplace",
        "label": "struct Blitoadz.Founder",
        "members": [
          {
            "astId": 1283,
            "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
            "label": "withdrawnAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 1285,
            "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
            "label": "shares",
            "offset": 16,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 1287,
            "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
            "label": "remainingAllocation",
            "offset": 18,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TokenOwnership)3204_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.TokenOwnership",
        "members": [
          {
            "astId": 3199,
            "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3201,
            "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
            "label": "startTimestamp",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 3203,
            "contract": "contracts/blitoadz/Blitoadz.sol:Blitoadz",
            "label": "burned",
            "offset": 28,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}